{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MBTI Personality Test Application\n\n## Overview\n\nThis is a comprehensive full-stack MBTI (Myers-Briggs Type Indicator) personality test application built with React on the frontend and Express on the backend. The application guides users through a series of psychological questions to determine their personality type, then provides detailed results including strengths, weaknesses, and career recommendations. Features complete multi-language support (Korean, English, Japanese, Chinese) with internationalized content, advanced analytics, SEO optimization, and modern user experience patterns.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 2025)\n\n- ✅ **Complete Multi-language Support**: Fully functional i18n system with React Context for state management\n- ✅ **Advanced Features**: Result analytics, social sharing, personality compatibility analysis, and growth planning tools  \n- ✅ **SEO Optimization**: Meta tags, JSON-LD structured data, and Korean keyword targeting\n- ✅ **Enhanced UX**: \"Go Home\" and \"Restart Test\" buttons for better navigation\n- ✅ **Performance & Stability**: React Context for language management, efficient question rendering, and stable language switching\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with a simple single-page application structure\n- **State Management**: React Context for language state, React hooks for local state, TanStack Query for server state management\n- **Internationalization**: React Context-based language management with localStorage persistence\n- **UI Framework**: shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling\n- **Component Structure**: Modular design with reusable UI components and custom hooks\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API structure with `/api` prefix for all endpoints\n- **Storage Interface**: Abstract storage interface (`IStorage`) with in-memory implementation (`MemStorage`)\n- **Request Handling**: Express middleware for JSON parsing, logging, and error handling\n- **Development Setup**: Vite integration for hot module replacement in development\n\n### Data Storage Solutions\n- **Database ORM**: Drizzle ORM configured for PostgreSQL with Neon Database serverless driver\n- **Schema Management**: Centralized schema definitions in shared directory using Drizzle with Zod validation\n- **Tables**: \n  - Users table for authentication with username/password\n  - Test results table storing personality scores, answers, and completion timestamps\n- **Migration System**: Drizzle Kit for database migrations and schema updates\n\n### Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store (`connect-pg-simple`)\n- **User Model**: Basic username/password authentication system\n- **Storage Layer**: Abstracted user management through the storage interface\n\n### External Dependencies\n- **Database**: Neon Database (PostgreSQL-compatible serverless database)\n- **UI Components**: Radix UI primitives for accessible, unstyled components\n- **Styling**: Tailwind CSS with custom design system and CSS variables\n- **Icons**: Lucide React for consistent iconography\n- **Development Tools**: ESBuild for production builds, TSX for development server\n- **Validation**: Zod for runtime type validation and schema definition\n\n### Key Design Patterns\n- **Separation of Concerns**: Clear separation between frontend, backend, and shared code\n- **Type Safety**: End-to-end TypeScript with shared types and Zod validation\n- **Component Composition**: Reusable UI components with consistent styling patterns\n- **Abstract Storage**: Storage interface allows for easy switching between different database implementations\n- **Configuration Management**: Environment-based configuration with proper type checking","size_bytes":4141},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        dark: \"var(--dark)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2795},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const testResults = pgTable(\"test_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  personalityType: text(\"personality_type\").notNull(),\n  scores: jsonb(\"scores\").notNull(),\n  answers: jsonb(\"answers\").notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertTestResultSchema = createInsertSchema(testResults).omit({\n  id: true,\n  completedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertTestResult = z.infer<typeof insertTestResultSchema>;\nexport type TestResult = typeof testResults.$inferSelect;\n","size_bytes":1199},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport NotFound from \"@/pages/not-found\";\nimport MBTITest from \"@/pages/mbti-test\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={MBTITest} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":834},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(215, 25%, 27%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(215, 25%, 27%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(215, 25%, 27%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(152, 57%, 40%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --dark: hsl(215, 25%, 27%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(152, 57%, 40%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(43, 96%, 56%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(217, 91%, 60%);\n  --dark: hsl(215, 25%, 27%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom gradient backgrounds */\n.gradient-primary-secondary {\n  background: linear-gradient(135deg, hsl(217, 91%, 60%) 0%, hsl(152, 57%, 40%) 100%);\n}\n\n.gradient-secondary-primary {\n  background: linear-gradient(135deg, hsl(152, 57%, 40%) 0%, hsl(217, 91%, 60%) 100%);\n}\n\n.gradient-accent-orange {\n  background: linear-gradient(135deg, hsl(43, 96%, 56%) 0%, hsl(25, 95%, 53%) 100%);\n}\n\n.gradient-purple {\n  background: linear-gradient(135deg, hsl(271, 91%, 65%) 0%, hsl(271, 91%, 45%) 100%);\n}\n","size_bytes":2436},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdvancedFeatures.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { PersonalityType } from \"@/data/personality-types\";\nimport { \n  TrendingUp, \n  Users2, \n  Brain, \n  Target, \n  Lightbulb, \n  BookOpen, \n  Calendar,\n  Trophy,\n  Heart,\n  Briefcase\n} from \"lucide-react\";\n\ninterface PersonalityScores {\n  E: number;\n  I: number;\n  S: number;\n  N: number;\n  T: number;\n  F: number;\n  J: number;\n  P: number;\n}\n\ninterface AdvancedFeaturesProps {\n  personalityType: string;\n  personalityInfo: PersonalityType;\n  scores: PersonalityScores;\n}\n\n// 성장 제안 데이터\nconst growthSuggestions: Record<string, string[]> = {\n  INTJ: [\n    \"팀워크 스킬 개발하기\",\n    \"감정 표현 연습하기\", \n    \"단기 목표 설정하기\",\n    \"네트워킹 활동 참여하기\"\n  ],\n  INFP: [\n    \"결정력 강화하기\",\n    \"시간 관리 개선하기\",\n    \"논리적 사고 훈련하기\",\n    \"갈등 해결 능력 기르기\"\n  ],\n  ENFP: [\n    \"집중력 향상시키기\",\n    \"체계적 계획 세우기\",\n    \"디테일 관리 능력 기르기\",\n    \"마감일 준수 연습하기\"\n  ],\n  ISTJ: [\n    \"창의성 개발하기\",\n    \"변화 적응력 기르기\",\n    \"유연한 사고 연습하기\",\n    \"새로운 경험 시도하기\"\n  ],\n  // 다른 타입들도 추가 가능\n};\n\n// 학습 리소스\nconst learningResources = [\n  {\n    title: \"MBTI 심화 이해\",\n    description: \"각 성격 유형별 상세 특성과 발전 방향\",\n    icon: <Brain className=\"w-5 h-5\" />,\n    topics: [\"인지 기능\", \"성격 발달\", \"타입 동역학\"]\n  },\n  {\n    title: \"대인관계 개선\",\n    description: \"다른 성격 유형과의 효과적인 소통법\",\n    icon: <Users2 className=\"w-5 h-5\" />,\n    topics: [\"갈등 해결\", \"팀워크\", \"리더십\"]\n  },\n  {\n    title: \"진로 개발\",\n    description: \"성격 유형에 맞는 직업과 진로 경로\",\n    icon: <Briefcase className=\"w-5 h-5\" />,\n    topics: [\"직업 탐색\", \"스킬 개발\", \"커리어 로드맵\"]\n  }\n];\n\nexport function AdvancedFeatures({ personalityType, personalityInfo, scores }: AdvancedFeaturesProps) {\n  const [activeTab, setActiveTab] = useState(\"growth\");\n\n  const suggestions = growthSuggestions[personalityType] || [\n    \"자기 성찰 시간 갖기\",\n    \"새로운 도전 해보기\",\n    \"다양한 관점 수용하기\",\n    \"지속적인 학습하기\"\n  ];\n\n  // 성격 균형도 계산\n  const dimensions = [\n    { name: \"외향성 vs 내향성\", e: scores.E, i: scores.I },\n    { name: \"감각 vs 직관\", s: scores.S, n: scores.N },\n    { name: \"사고 vs 감정\", t: scores.T, f: scores.F },\n    { name: \"판단 vs 인식\", j: scores.J, p: scores.P }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"growth\">성장 계획</TabsTrigger>\n          <TabsTrigger value=\"balance\">성격 균형</TabsTrigger>\n          <TabsTrigger value=\"learning\">학습 자료</TabsTrigger>\n          <TabsTrigger value=\"goals\">목표 설정</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"growth\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                <span>개인 성장 제안</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                {suggestions.map((suggestion, index) => (\n                  <div key={index} className=\"flex items-start space-x-3 p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center mt-1\">\n                      <span className=\"text-xs font-semibold text-primary\">{index + 1}</span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{suggestion}</p>\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        {personalityType} 유형의 특성을 고려한 개선 방향입니다.\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"balance\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Target className=\"w-5 h-5\" />\n                <span>성격 차원 균형도</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {dimensions.map((dimension, index) => {\n                  const total = Object.values(dimension).slice(1).reduce((a, b) => a + b, 0);\n                  const values = Object.values(dimension).slice(1);\n                  const percentage = (values[0] / total) * 100;\n                  \n                  return (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-medium\">{dimension.name}</span>\n                        <span className=\"text-sm text-gray-600\">\n                          {Math.round(percentage)}% : {Math.round(100 - percentage)}%\n                        </span>\n                      </div>\n                      <Progress value={percentage} className=\"h-3\" />\n                      <div className=\"flex justify-between text-xs text-gray-500\">\n                        <span>{Object.keys(dimension)[1].toUpperCase()}</span>\n                        <span>{Object.keys(dimension)[2].toUpperCase()}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"learning\" className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            {learningResources.map((resource, index) => (\n              <Card key={index} className=\"h-full\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                    {resource.icon}\n                    <span>{resource.title}</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-600 mb-4\">{resource.description}</p>\n                  <div className=\"space-y-2\">\n                    {resource.topics.map((topic, topicIndex) => (\n                      <Badge key={topicIndex} variant=\"secondary\" className=\"mr-2\">\n                        {topic}\n                      </Badge>\n                    ))}\n                  </div>\n                  <Button variant=\"outline\" className=\"w-full mt-4\">\n                    자세히 보기\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"goals\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Trophy className=\"w-5 h-5\" />\n                <span>맞춤형 목표 설정</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold flex items-center space-x-2\">\n                    <Calendar className=\"w-4 h-4\" />\n                    <span>단기 목표 (1-3개월)</span>\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                      <span className=\"text-sm\">매일 15분 자기 성찰 시간 갖기</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                      <span className=\"text-sm\">새로운 사람과 대화 나누기</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                      <span className=\"text-sm\">약점 보완을 위한 활동 시작하기</span>\n                    </li>\n                  </ul>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold flex items-center space-x-2\">\n                    <Lightbulb className=\"w-4 h-4\" />\n                    <span>장기 목표 (6-12개월)</span>\n                  </h4>\n                  <ul className=\"space-y-2\">\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-secondary rounded-full\"></div>\n                      <span className=\"text-sm\">성격 유형의 잠재력 개발하기</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-secondary rounded-full\"></div>\n                      <span className=\"text-sm\">대인관계 만족도 향상시키기</span>\n                    </li>\n                    <li className=\"flex items-center space-x-2\">\n                      <div className=\"w-2 h-2 bg-secondary rounded-full\"></div>\n                      <span className=\"text-sm\">진로/직업에서 성격 강점 활용하기</span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10277},"client/src/components/LanguageSelector.tsx":{"content":"import { Globe } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useLanguageContext, Language } from \"@/contexts/LanguageContext\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\n\nconst languages = [\n  { value: 'ko' as Language, label: '한국어', flag: '🇰🇷' },\n  { value: 'en' as Language, label: 'English', flag: '🇺🇸' },\n  { value: 'ja' as Language, label: '日本語', flag: '🇯🇵' },\n  { value: 'zh' as Language, label: '中文', flag: '🇨🇳' },\n];\n\nexport function LanguageSelector() {\n  const { language, changeLanguage } = useLanguageContext();\n  const { t } = useLanguage();\n  const analytics = useAnalytics();\n\n  const handleLanguageChange = (newLanguage: Language) => {\n    changeLanguage(newLanguage);\n    analytics.trackLanguageChange(newLanguage);\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Globe className=\"w-4 h-4 text-gray-500\" />\n      <Select value={language} onValueChange={handleLanguageChange}>\n        <SelectTrigger className=\"w-32\">\n          <SelectValue>\n            <div className=\"flex items-center space-x-2\">\n              <span>{languages.find(l => l.value === language)?.flag}</span>\n              <span className=\"text-sm\">{languages.find(l => l.value === language)?.label}</span>\n            </div>\n          </SelectValue>\n        </SelectTrigger>\n        <SelectContent>\n          {languages.map((lang) => (\n            <SelectItem key={lang.value} value={lang.value}>\n              <div className=\"flex items-center space-x-2\">\n                <span>{lang.flag}</span>\n                <span>{lang.label}</span>\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}","size_bytes":1921},"client/src/components/ResultsAnalytics.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { PersonalityType } from \"@/data/personality-types\";\nimport { BarChart3, Users, Heart, Download, Zap } from \"lucide-react\";\n\ninterface PersonalityScores {\n  E: number;\n  I: number;\n  S: number;\n  N: number;\n  T: number;\n  F: number;\n  J: number;\n  P: number;\n}\n\ninterface ResultsAnalyticsProps {\n  personalityType: string;\n  personalityInfo: PersonalityType;\n  scores: PersonalityScores;\n}\n\n// 호환성 매트릭스 (간단한 예시)\nconst compatibilityMatrix: Record<string, { best: string[]; good: string[]; challenging: string[] }> = {\n  INTJ: { best: [\"ENTP\", \"ENFP\"], good: [\"INTJ\", \"INFJ\", \"ENTJ\"], challenging: [\"ESFP\", \"ESTP\"] },\n  INTP: { best: [\"ENTJ\", \"ENFJ\"], good: [\"INTP\", \"INTJ\", \"ENTP\"], challenging: [\"ESFJ\", \"ESTJ\"] },\n  ENTJ: { best: [\"INTP\", \"INFP\"], good: [\"ENTJ\", \"INTJ\", \"ENTP\"], challenging: [\"ISFP\", \"ISTP\"] },\n  ENTP: { best: [\"INTJ\", \"INFJ\"], good: [\"ENTP\", \"ENFP\", \"ENTJ\"], challenging: [\"ISFJ\", \"ISTJ\"] },\n  INFJ: { best: [\"ENTP\", \"ENFP\"], good: [\"INFJ\", \"INTJ\", \"ENFJ\"], challenging: [\"ESTP\", \"ESFP\"] },\n  INFP: { best: [\"ENTJ\", \"ENFJ\"], good: [\"INFP\", \"ENFP\", \"INFJ\"], challenging: [\"ESTJ\", \"ESFJ\"] },\n  ENFJ: { best: [\"INFP\", \"ISFP\"], good: [\"ENFJ\", \"INFJ\", \"ENFP\"], challenging: [\"ISTP\", \"ESTP\"] },\n  ENFP: { best: [\"INTJ\", \"INFJ\"], good: [\"ENFP\", \"ENFJ\", \"INFP\"], challenging: [\"ISTJ\", \"ESTJ\"] },\n  ISTJ: { best: [\"ESFP\", \"ESTP\"], good: [\"ISTJ\", \"ISFJ\", \"ESTJ\"], challenging: [\"ENFP\", \"ENTP\"] },\n  ISFJ: { best: [\"ESFP\", \"ESTP\"], good: [\"ISFJ\", \"ISTJ\", \"ESFJ\"], challenging: [\"ENTP\", \"ENFP\"] },\n  ESTJ: { best: [\"ISFP\", \"ISTP\"], good: [\"ESTJ\", \"ISTJ\", \"ESFJ\"], challenging: [\"INFP\", \"ENFP\"] },\n  ESFJ: { best: [\"ISFP\", \"ISTP\"], good: [\"ESFJ\", \"ISFJ\", \"ESTJ\"], challenging: [\"INTP\", \"ENTP\"] },\n  ISTP: { best: [\"ESFJ\", \"ESTJ\"], good: [\"ISTP\", \"ESTP\", \"ISFP\"], challenging: [\"ENFJ\", \"ESFJ\"] },\n  ISFP: { best: [\"ESFJ\", \"ESTJ\"], good: [\"ISFP\", \"ISTP\", \"ESFP\"], challenging: [\"ENTJ\", \"ESTJ\"] },\n  ESTP: { best: [\"ISFJ\", \"ISTJ\"], good: [\"ESTP\", \"ESFP\", \"ISTP\"], challenging: [\"INFJ\", \"ENFJ\"] },\n  ESFP: { best: [\"ISFJ\", \"ISTJ\"], good: [\"ESFP\", \"ESTP\", \"ISFP\"], challenging: [\"INTJ\", \"ENFJ\"] }\n};\n\nconst celebPersonalities: Record<string, string[]> = {\n  INTJ: [\"일론 머스크\", \"크리스토퍼 놀란\", \"니콜라 테슬라\"],\n  INTP: [\"알베르트 아인슈타인\", \"빌 게이츠\", \"찰스 다윈\"],\n  ENTJ: [\"스티브 잡스\", \"마거릿 대처\", \"나폴레옹\"],\n  ENTP: [\"로버트 다우니 주니어\", \"월트 디즈니\", \"마크 트웨인\"],\n  INFJ: [\"넬슨 만델라\", \"마틴 루터 킹\", \"마더 테레사\"],\n  INFP: [\"윌리엄 셰익스피어\", \"조니 뎁\", \"프린세스 다이애나\"],\n  ENFJ: [\"오프라 윈프리\", \"버락 오바마\", \"존 F. 케네디\"],\n  ENFP: [\"로빈 윌리엄스\", \"윌 스미스\", \"엘렌 드제너러스\"],\n  ISTJ: [\"조지 워싱턴\", \"워렌 버핏\", \"안젤라 메르켈\"],\n  ISFJ: [\"마더 테레사\", \"로사 파크스\", \"케이트 미들턴\"],\n  ESTJ: [\"프랭클린 루즈벨트\", \"고든 램지\", \"보리스 존슨\"],\n  ESFJ: [\"휴 잭맨\", \"제니퍼 로페즈\", \"테일러 스위프트\"],\n  ISTP: [\"클린트 이스트우드\", \"브루스 리\", \"스티브 잡스\"],\n  ISFP: [\"마이클 잭슨\", \"프린스\", \"오드리 햅번\"],\n  ESTP: [\"도널드 트럼프\", \"어니스트 헤밍웨이\", \"브루스 윌리스\"],\n  ESFP: [\"마릴린 먼로\", \"엘비스 프레슬리\", \"빌 클린턴\"]\n};\n\nexport function ResultsAnalytics({ personalityType, personalityInfo, scores }: ResultsAnalyticsProps) {\n  const [showCompatibility, setShowCompatibility] = useState(false);\n  \n  const compatibility = compatibilityMatrix[personalityType] || { best: [], good: [], challenging: [] };\n  const celebrities = celebPersonalities[personalityType] || [];\n\n  const downloadResults = () => {\n    const results = {\n      personalityType,\n      title: personalityInfo.title,\n      subtitle: personalityInfo.subtitle,\n      description: personalityInfo.description,\n      scores,\n      strengths: personalityInfo.strengths,\n      weaknesses: personalityInfo.weaknesses,\n      careers: personalityInfo.careers,\n      testDate: new Date().toISOString()\n    };\n    \n    const dataStr = JSON.stringify(results, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `mbti-result-${personalityType}-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 분석 통계 */}\n      <div className=\"grid md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"w-5 h-5 text-primary\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">전체 인구 중</p>\n                <p className=\"text-xl font-bold text-primary\">\n                  {personalityType === 'INTJ' ? '2%' : \n                   personalityType === 'ENFP' ? '8%' : \n                   personalityType === 'ISFJ' ? '13%' : '6%'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Zap className=\"w-5 h-5 text-secondary\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">에너지 레벨</p>\n                <p className=\"text-xl font-bold text-secondary\">\n                  {scores.E > scores.I ? '외향적' : '내향적'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Heart className=\"w-5 h-5 text-accent\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">결정 방식</p>\n                <p className=\"text-xl font-bold text-accent\">\n                  {scores.T > scores.F ? '논리형' : '감정형'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* 유명인 비교 */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"w-5 h-5\" />\n            <span>같은 성격 유형의 유명인</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {celebrities.map((celebrity, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"text-sm\">\n                {celebrity}\n              </Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 호환성 분석 */}\n      <Card>\n        <CardHeader>\n          <CardTitle>성격 호환성 분석</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-semibold text-green-600 mb-2\">최고 궁합</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {compatibility.best.map((type, index) => (\n                  <Badge key={index} className=\"bg-green-100 text-green-800\">\n                    {type}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-blue-600 mb-2\">좋은 궁합</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {compatibility.good.map((type, index) => (\n                  <Badge key={index} className=\"bg-blue-100 text-blue-800\">\n                    {type}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-orange-600 mb-2\">도전적 관계</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {compatibility.challenging.map((type, index) => (\n                  <Badge key={index} className=\"bg-orange-100 text-orange-800\">\n                    {type}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 추가 기능들 */}\n      <div className=\"flex flex-wrap gap-4\">\n        <Button onClick={downloadResults} variant=\"outline\" className=\"flex items-center space-x-2\">\n          <Download className=\"w-4 h-4\" />\n          <span>결과 다운로드</span>\n        </Button>\n        \n        <Dialog>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\">상세 분석 보기</Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{personalityType} 상세 분석</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">성격 특성 점수</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>외향성: {Math.round(scores.E)}%</div>\n                  <div>내향성: {Math.round(scores.I)}%</div>\n                  <div>감각: {Math.round(scores.S)}%</div>\n                  <div>직관: {Math.round(scores.N)}%</div>\n                  <div>사고: {Math.round(scores.T)}%</div>\n                  <div>감정: {Math.round(scores.F)}%</div>\n                  <div>판단: {Math.round(scores.J)}%</div>\n                  <div>인식: {Math.round(scores.P)}%</div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-2\">개발 제안</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-sm text-gray-600\">\n                  <li>약점을 보완하기 위한 구체적인 방법들을 연습해보세요</li>\n                  <li>다른 성격 유형과의 소통 방식을 이해해보세요</li>\n                  <li>자신의 강점을 더욱 발전시킬 수 있는 활동을 찾아보세요</li>\n                </ul>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":10671},"client/src/components/SEOJsonLd.tsx":{"content":"interface SEOJsonLdProps {\n  personalityType?: string;\n  personalityTitle?: string;\n  testResult?: boolean;\n}\n\nexport function SEOJsonLd({ personalityType, personalityTitle, testResult = false }: SEOJsonLdProps) {\n  const baseSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebApplication\",\n    \"name\": \"무료 MBTI 성격유형 테스트\",\n    \"description\": \"정확한 MBTI 성격유형 테스트로 당신의 16가지 성격 중 하나를 발견하세요\",\n    \"url\": typeof window !== 'undefined' ? window.location.origin : '',\n    \"applicationCategory\": \"PersonalityTest\",\n    \"operatingSystem\": \"Web Browser\",\n    \"offers\": {\n      \"@type\": \"Offer\",\n      \"price\": \"0\",\n      \"priceCurrency\": \"KRW\"\n    },\n    \"author\": {\n      \"@type\": \"Organization\",\n      \"name\": \"MBTI 테스트\"\n    },\n    \"aggregateRating\": {\n      \"@type\": \"AggregateRating\",\n      \"ratingValue\": \"4.8\",\n      \"reviewCount\": \"15420\",\n      \"bestRating\": \"5\"\n    }\n  };\n\n  if (testResult && personalityType && personalityTitle) {\n    const resultSchema = {\n      ...baseSchema,\n      \"@type\": \"WebPage\",\n      \"name\": `${personalityType} ${personalityTitle} - MBTI 테스트 결과`,\n      \"description\": `당신의 MBTI 성격유형은 ${personalityType} (${personalityTitle})입니다. 상세한 성격 분석과 특성을 확인하세요.`,\n      \"mainEntity\": {\n        \"@type\": \"Person\",\n        \"name\": `${personalityType} 성격유형`,\n        \"description\": personalityTitle,\n        \"knowsAbout\": [`MBTI ${personalityType}`, \"성격 분석\", \"심리테스트\"]\n      }\n    };\n    \n    return (\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(resultSchema) }}\n      />\n    );\n  }\n\n  return (\n    <script\n      type=\"application/ld+json\"\n      dangerouslySetInnerHTML={{ __html: JSON.stringify(baseSchema) }}\n    />\n  );\n}","size_bytes":1883},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\nexport type Language = 'ko' | 'en' | 'ja' | 'zh';\n\ninterface LanguageContextType {\n  language: Language;\n  changeLanguage: (newLanguage: Language) => void;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport const LanguageProvider = ({ children }: { children: ReactNode }) => {\n  const [language, setLanguage] = useState<Language>(() => {\n    if (typeof window !== 'undefined') {\n      const savedLanguage = localStorage.getItem('mbti-language') as Language;\n      if (savedLanguage && ['ko', 'en', 'ja', 'zh'].includes(savedLanguage)) {\n        return savedLanguage;\n      }\n    }\n    return 'ko';\n  });\n\n  const changeLanguage = (newLanguage: Language) => {\n    setLanguage(newLanguage);\n    localStorage.setItem('mbti-language', newLanguage);\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, changeLanguage }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguageContext = () => {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguageContext must be used within a LanguageProvider');\n  }\n  return context;\n};","size_bytes":1241},"client/src/data/personality-types-i18n.ts":{"content":"import { Language } from \"@/hooks/useLanguage\";\n\nexport interface MultiLanguagePersonalityType {\n  title: {\n    ko: string;\n    en: string;\n    ja: string;\n    zh: string;\n  };\n  subtitle: {\n    ko: string;\n    en: string;\n    ja: string;\n    zh: string;\n  };\n  description: {\n    ko: string;\n    en: string;\n    ja: string;\n    zh: string;\n  };\n  strengths: {\n    ko: string[];\n    en: string[];\n    ja: string[];\n    zh: string[];\n  };\n  weaknesses: {\n    ko: string[];\n    en: string[];\n    ja: string[];\n    zh: string[];\n  };\n  careers: Array<{\n    name: {\n      ko: string;\n      en: string;\n      ja: string;\n      zh: string;\n    };\n    icon: string;\n  }>;\n}\n\nexport const multiLanguagePersonalityTypes: Record<string, MultiLanguagePersonalityType> = {\n  INTJ: {\n    title: {\n      ko: \"전략가\",\n      en: \"The Architect\",\n      ja: \"建築家\",\n      zh: \"建筑师\"\n    },\n    subtitle: {\n      ko: \"The Architect\",\n      en: \"The Architect\",\n      ja: \"The Architect\",\n      zh: \"The Architect\"\n    },\n    description: {\n      ko: \"상상력이 풍부하고 전략적 사고를 하는 완벽주의자입니다. 모든 일에 계획이 있습니다.\",\n      en: \"Imaginative and strategic thinkers, with a plan for everything.\",\n      ja: \"想像力豊かで戦略的思考を持つ完璧主義者です。すべてに計画があります。\",\n      zh: \"富有想象力的战略思想家，对一切都有计划。\"\n    },\n    strengths: {\n      ko: [\n        \"뛰어난 전략적 사고\",\n        \"독립적이고 자율적\",\n        \"높은 목표 의식\",\n        \"창의적 문제 해결 능력\"\n      ],\n      en: [\n        \"Excellent strategic thinking\",\n        \"Independent and autonomous\",\n        \"High goal orientation\",\n        \"Creative problem-solving ability\"\n      ],\n      ja: [\n        \"優れた戦略的思考\",\n        \"独立的で自律的\",\n        \"高い目標意識\",\n        \"創造的問題解決能力\"\n      ],\n      zh: [\n        \"出色的战略思维\",\n        \"独立自主\",\n        \"高度目标导向\",\n        \"创造性解决问题的能力\"\n      ]\n    },\n    weaknesses: {\n      ko: [\n        \"지나친 완벽주의\",\n        \"타인의 감정 이해 부족\",\n        \"비판에 대한 민감성\",\n        \"사회적 상호작용의 어려움\"\n      ],\n      en: [\n        \"Excessive perfectionism\",\n        \"Lack of understanding others' emotions\",\n        \"Sensitivity to criticism\",\n        \"Difficulty with social interactions\"\n      ],\n      ja: [\n        \"過度な完璧主義\",\n        \"他人の感情理解不足\",\n        \"批判に対する敏感性\",\n        \"社会的相互作用の困難\"\n      ],\n      zh: [\n        \"过度完美主义\",\n        \"缺乏理解他人情感\",\n        \"对批评敏感\",\n        \"社交互动困难\"\n      ]\n    },\n    careers: [\n      { \n        name: {\n          ko: \"과학자/연구원\",\n          en: \"Scientist/Researcher\",\n          ja: \"科学者/研究者\",\n          zh: \"科学家/研究员\"\n        }, \n        icon: \"🔬\" \n      },\n      { \n        name: {\n          ko: \"엔지니어\",\n          en: \"Engineer\",\n          ja: \"エンジニア\",\n          zh: \"工程师\"\n        }, \n        icon: \"⚙️\" \n      },\n      { \n        name: {\n          ko: \"경영 컨설턴트\",\n          en: \"Management Consultant\",\n          ja: \"経営コンサルタント\",\n          zh: \"管理顾问\"\n        }, \n        icon: \"📊\" \n      },\n      { \n        name: {\n          ko: \"건축가\",\n          en: \"Architect\",\n          ja: \"建築家\",\n          zh: \"建筑师\"\n        }, \n        icon: \"🏗️\" \n      },\n      { \n        name: {\n          ko: \"투자 분석가\",\n          en: \"Investment Analyst\",\n          ja: \"投資アナリスト\",\n          zh: \"投资分析师\"\n        }, \n        icon: \"💹\" \n      },\n      { \n        name: {\n          ko: \"시스템 분석가\",\n          en: \"Systems Analyst\",\n          ja: \"システムアナリスト\",\n          zh: \"系统分析师\"\n        }, \n        icon: \"💻\" \n      }\n    ]\n  },\n  INTP: {\n    title: {\n      ko: \"논리학자\",\n      en: \"The Thinker\",\n      ja: \"論理学者\",\n      zh: \"逻辑学家\"\n    },\n    subtitle: {\n      ko: \"The Thinker\",\n      en: \"The Thinker\",\n      ja: \"The Thinker\",\n      zh: \"The Thinker\"\n    },\n    description: {\n      ko: \"혁신적인 발명가로, 지식에 대한 갈증을 멈출 줄 모릅니다.\",\n      en: \"Innovative inventors with an unquenchable thirst for knowledge.\",\n      ja: \"革新的な発明家で、知識への渇望を止めることを知りません。\",\n      zh: \"创新的发明家，对知识有着永不停息的渴望。\"\n    },\n    strengths: {\n      ko: [\n        \"뛰어난 논리적 사고\",\n        \"높은 창의성\",\n        \"독립적 사고\",\n        \"복잡한 문제 해결 능력\"\n      ],\n      en: [\n        \"Excellent logical thinking\",\n        \"High creativity\",\n        \"Independent thinking\",\n        \"Complex problem-solving ability\"\n      ],\n      ja: [\n        \"優れた論理的思考\",\n        \"高い創造性\",\n        \"独立的思考\",\n        \"複雑な問題解決能力\"\n      ],\n      zh: [\n        \"出色的逻辑思维\",\n        \"高度创造性\",\n        \"独立思考\",\n        \"复杂问题解决能力\"\n      ]\n    },\n    weaknesses: {\n      ko: [\n        \"실행력 부족\",\n        \"감정 표현의 어려움\",\n        \"일상적 업무에 대한 무관심\",\n        \"타인과의 소통 부족\"\n      ],\n      en: [\n        \"Lack of execution\",\n        \"Difficulty expressing emotions\",\n        \"Indifference to routine tasks\",\n        \"Poor communication with others\"\n      ],\n      ja: [\n        \"実行力不足\",\n        \"感情表現の困難\",\n        \"日常業務への無関心\",\n        \"他人とのコミュニケーション不足\"\n      ],\n      zh: [\n        \"执行力不足\",\n        \"情感表达困难\",\n        \"对日常工作漠不关心\",\n        \"与他人沟通不足\"\n      ]\n    },\n    careers: [\n      { \n        name: {\n          ko: \"프로그래머\",\n          en: \"Programmer\",\n          ja: \"プログラマー\",\n          zh: \"程序员\"\n        }, \n        icon: \"💻\" \n      },\n      { \n        name: {\n          ko: \"수학자\",\n          en: \"Mathematician\",\n          ja: \"数学者\",\n          zh: \"数学家\"\n        }, \n        icon: \"📐\" \n      },\n      { \n        name: {\n          ko: \"철학자\",\n          en: \"Philosopher\",\n          ja: \"哲学者\",\n          zh: \"哲学家\"\n        }, \n        icon: \"💭\" \n      },\n      { \n        name: {\n          ko: \"물리학자\",\n          en: \"Physicist\",\n          ja: \"物理学者\",\n          zh: \"物理学家\"\n        }, \n        icon: \"🔬\" \n      },\n      { \n        name: {\n          ko: \"게임 개발자\",\n          en: \"Game Developer\",\n          ja: \"ゲーム開発者\",\n          zh: \"游戏开发者\"\n        }, \n        icon: \"🎮\" \n      },\n      { \n        name: {\n          ko: \"학자/교수\",\n          en: \"Scholar/Professor\",\n          ja: \"学者/教授\",\n          zh: \"学者/教授\"\n        }, \n        icon: \"🎓\" \n      }\n    ]\n  },\n  ENTJ: {\n    title: {\n      ko: \"지휘관\",\n      en: \"The Commander\",\n      ja: \"指揮官\",\n      zh: \"指挥官\"\n    },\n    subtitle: {\n      ko: \"The Commander\",\n      en: \"The Commander\",\n      ja: \"The Commander\",\n      zh: \"The Commander\"\n    },\n    description: {\n      ko: \"타고난 지도자로, 카리스마와 자신감으로 공통 목표를 향해 사람들을 이끕니다.\",\n      en: \"Bold, imaginative and strong-willed leaders, always finding a way – or making one.\",\n      ja: \"生まれながらのリーダーで、カリスマと自信で共通の目標に向けて人々を導きます。\",\n      zh: \"天生的领导者，以魅力和自信引导人们朝着共同目标前进。\"\n    },\n    strengths: {\n      ko: [\n        \"강력한 리더십\",\n        \"뛰어난 조직 능력\",\n        \"목표 지향적\",\n        \"효율성 추구\"\n      ],\n      en: [\n        \"Strong leadership\",\n        \"Excellent organizational skills\",\n        \"Goal-oriented\",\n        \"Efficiency-focused\"\n      ],\n      ja: [\n        \"強力なリーダーシップ\",\n        \"優れた組織能力\",\n        \"目標指向\",\n        \"効率性追求\"\n      ],\n      zh: [\n        \"强大的领导力\",\n        \"出色的组织能力\",\n        \"目标导向\",\n        \"追求效率\"\n      ]\n    },\n    weaknesses: {\n      ko: [\n        \"지나친 권위주의\",\n        \"감정적 배려 부족\",\n        \"인내심 부족\",\n        \"완벽주의적 성향\"\n      ],\n      en: [\n        \"Excessive authoritarianism\",\n        \"Lack of emotional consideration\",\n        \"Impatience\",\n        \"Perfectionist tendencies\"\n      ],\n      ja: [\n        \"過度な権威主義\",\n        \"感情的配慮不足\",\n        \"忍耐力不足\",\n        \"完璧主義的傾向\"\n      ],\n      zh: [\n        \"过度权威主义\",\n        \"缺乏情感关怀\",\n        \"缺乏耐心\",\n        \"完美主义倾向\"\n      ]\n    },\n    careers: [\n      { \n        name: {\n          ko: \"CEO/경영진\",\n          en: \"CEO/Executive\",\n          ja: \"CEO/経営陣\",\n          zh: \"CEO/高管\"\n        }, \n        icon: \"👔\" \n      },\n      { \n        name: {\n          ko: \"프로젝트 매니저\",\n          en: \"Project Manager\",\n          ja: \"プロジェクトマネージャー\",\n          zh: \"项目经理\"\n        }, \n        icon: \"📋\" \n      },\n      { \n        name: {\n          ko: \"변호사\",\n          en: \"Lawyer\",\n          ja: \"弁護士\",\n          zh: \"律师\"\n        }, \n        icon: \"⚖️\" \n      },\n      { \n        name: {\n          ko: \"투자 은행가\",\n          en: \"Investment Banker\",\n          ja: \"投資銀行家\",\n          zh: \"投资银行家\"\n        }, \n        icon: \"🏦\" \n      },\n      { \n        name: {\n          ko: \"기업가\",\n          en: \"Entrepreneur\",\n          ja: \"起業家\",\n          zh: \"企业家\"\n        }, \n        icon: \"🚀\" \n      },\n      { \n        name: {\n          ko: \"정치인\",\n          en: \"Politician\",\n          ja: \"政治家\",\n          zh: \"政治家\"\n        }, \n        icon: \"🏛️\" \n      }\n    ]\n  },\n  ENTP: {\n    title: {\n      ko: \"토론가\",\n      en: \"The Debater\",\n      ja: \"討論者\",\n      zh: \"辩论家\"\n    },\n    subtitle: {\n      ko: \"The Debater\",\n      en: \"The Debater\",\n      ja: \"The Debater\",\n      zh: \"The Debater\"\n    },\n    description: {\n      ko: \"똑똑하고 호기심이 많은 사상가로, 지적 도전을 거부할 수 없습니다.\",\n      en: \"Smart and curious thinkers who cannot resist an intellectual challenge.\",\n      ja: \"賢くて好奇心旺盛な思想家で、知的挑戦を拒むことができません。\",\n      zh: \"聪明好奇的思想家，无法抗拒智力挑战。\"\n    },\n    strengths: {\n      ko: [\n        \"뛰어난 창의성\",\n        \"빠른 학습 능력\",\n        \"유연한 사고\",\n        \"강한 호기심\"\n      ],\n      en: [\n        \"Excellent creativity\",\n        \"Quick learning ability\",\n        \"Flexible thinking\",\n        \"Strong curiosity\"\n      ],\n      ja: [\n        \"優れた創造性\",\n        \"速い学習能力\",\n        \"柔軟な思考\",\n        \"強い好奇心\"\n      ],\n      zh: [\n        \"出色的创造力\",\n        \"快速学习能力\",\n        \"灵活思维\",\n        \"强烈好奇心\"\n      ]\n    },\n    weaknesses: {\n      ko: [\n        \"집중력 부족\",\n        \"루틴 업무 기피\",\n        \"감정 처리의 어려움\",\n        \"완료에 대한 어려움\"\n      ],\n      en: [\n        \"Lack of focus\",\n        \"Avoidance of routine tasks\",\n        \"Difficulty processing emotions\",\n        \"Trouble with completion\"\n      ],\n      ja: [\n        \"集中力不足\",\n        \"ルーチン業務回避\",\n        \"感情処理の困難\",\n        \"完了への困難\"\n      ],\n      zh: [\n        \"注意力不足\",\n        \"回避例行工作\",\n        \"情感处理困难\",\n        \"完成任务困难\"\n      ]\n    },\n    careers: [\n      { \n        name: {\n          ko: \"마케팅 전문가\",\n          en: \"Marketing Specialist\",\n          ja: \"マーケティング専門家\",\n          zh: \"营销专家\"\n        }, \n        icon: \"📢\" \n      },\n      { \n        name: {\n          ko: \"기자\",\n          en: \"Journalist\",\n          ja: \"記者\",\n          zh: \"记者\"\n        }, \n        icon: \"📰\" \n      },\n      { \n        name: {\n          ko: \"발명가\",\n          en: \"Inventor\",\n          ja: \"発明家\",\n          zh: \"发明家\"\n        }, \n        icon: \"💡\" \n      },\n      { \n        name: {\n          ko: \"광고 크리에이티브\",\n          en: \"Advertising Creative\",\n          ja: \"広告クリエイティブ\",\n          zh: \"广告创意\"\n        }, \n        icon: \"🎨\" \n      },\n      { \n        name: {\n          ko: \"컨설턴트\",\n          en: \"Consultant\",\n          ja: \"コンサルタント\",\n          zh: \"顾问\"\n        }, \n        icon: \"💼\" \n      },\n      { \n        name: {\n          ko: \"연설가\",\n          en: \"Public Speaker\",\n          ja: \"講演者\",\n          zh: \"演讲家\"\n        }, \n        icon: \"🎤\" \n      }\n    ]\n  },\n  INFJ: {\n    title: {\n      ko: \"옹호자\",\n      en: \"The Advocate\",\n      ja: \"提唱者\",\n      zh: \"提倡者\"\n    },\n    subtitle: {\n      ko: \"The Advocate\",\n      en: \"The Advocate\",\n      ja: \"The Advocate\",\n      zh: \"The Advocate\"\n    },\n    description: {\n      ko: \"선의의 옹호자로, 조용하지만 확고한 의지를 가지고 있습니다.\",\n      en: \"Quiet and mystical, yet very inspiring and tireless idealists.\",\n      ja: \"静かで神秘的でありながら、非常にインスピレーション豊かで疲れ知らずの理想主義者です。\",\n      zh: \"安静神秘，但非常有远见卓识和不知疲倦的理想主义者。\"\n    },\n    strengths: {\n      ko: [\"직관적 통찰력\", \"이타적 성향\", \"결정적 순간의 추진력\", \"창의적 해결책\"],\n      en: [\"Intuitive insights\", \"Altruistic nature\", \"Decisive when needed\", \"Creative solutions\"],\n      ja: [\"直感的洞察力\", \"利他的性向\", \"決定的瞬間の推進力\", \"創造的解決策\"],\n      zh: [\"直觉洞察力\", \"利他主义\", \"关键时刻的推动力\", \"创造性解决方案\"]\n    },\n    weaknesses: {\n      ko: [\"과도한 민감성\", \"완벽주의\", \"소진되기 쉬움\", \"비판에 대한 민감성\"],\n      en: [\"Overly sensitive\", \"Perfectionist\", \"Prone to burnout\", \"Sensitive to criticism\"],\n      ja: [\"過度な敏感性\", \"完璧主義\", \"燃え尽きやすい\", \"批判に対する敏感性\"],\n      zh: [\"过度敏感\", \"完美主义\", \"容易倦怠\", \"对批评敏感\"]\n    },\n    careers: [\n      { name: { ko: \"상담사\", en: \"Counselor\", ja: \"カウンセラー\", zh: \"咨询师\" }, icon: \"🧠\" },\n      { name: { ko: \"작가\", en: \"Writer\", ja: \"作家\", zh: \"作家\" }, icon: \"✍️\" },\n      { name: { ko: \"사회복지사\", en: \"Social Worker\", ja: \"社会福祉士\", zh: \"社会工作者\" }, icon: \"🤝\" },\n      { name: { ko: \"교사\", en: \"Teacher\", ja: \"教師\", zh: \"教师\" }, icon: \"📚\" },\n      { name: { ko: \"의사\", en: \"Doctor\", ja: \"医師\", zh: \"医生\" }, icon: \"⚕️\" },\n      { name: { ko: \"예술가\", en: \"Artist\", ja: \"芸術家\", zh: \"艺术家\" }, icon: \"🎨\" }\n    ]\n  },\n  INFP: {\n    title: {\n      ko: \"중재자\",\n      en: \"The Mediator\",\n      ja: \"仲介者\",\n      zh: \"调停者\"\n    },\n    subtitle: {\n      ko: \"The Mediator\",\n      en: \"The Mediator\", \n      ja: \"The Mediator\",\n      zh: \"The Mediator\"\n    },\n    description: {\n      ko: \"시적이고 친절하며 이타적인 사람들로, 언제나 선을 행하고자 합니다.\",\n      en: \"Poetic, kind and altruistic people, always eager to help a good cause.\",\n      ja: \"詩的で親切で利他的な人々で、常に良い目的を助けることを熱望しています。\",\n      zh: \"富有诗意、善良和利他主义的人，总是热衷于帮助正义的事业。\"\n    },\n    strengths: {\n      ko: [\"강한 가치관\", \"창의적 사고\", \"열정적 헌신\", \"개인적 성장 추구\"],\n      en: [\"Strong values\", \"Creative thinking\", \"Passionate dedication\", \"Personal growth focus\"],\n      ja: [\"強い価値観\", \"創造的思考\", \"情熱的献身\", \"個人的成長追求\"],\n      zh: [\"坚强的价值观\", \"创造性思维\", \"热情奉献\", \"注重个人成长\"]\n    },\n    weaknesses: {\n      ko: [\"지나친 이상주의\", \"실용성 부족\", \"자기비판적\", \"스트레스에 취약\"],\n      en: [\"Overly idealistic\", \"Lack of practicality\", \"Self-critical\", \"Vulnerable to stress\"],\n      ja: [\"過度な理想主義\", \"実用性不足\", \"自己批判的\", \"ストレスに脆弱\"],\n      zh: [\"过度理想主义\", \"缺乏实用性\", \"自我批评\", \"容易受压力影响\"]\n    },\n    careers: [\n      { name: { ko: \"심리학자\", en: \"Psychologist\", ja: \"心理学者\", zh: \"心理学家\" }, icon: \"🧠\" },\n      { name: { ko: \"그래픽 디자이너\", en: \"Graphic Designer\", ja: \"グラフィックデザイナー\", zh: \"平面设计师\" }, icon: \"🎨\" },\n      { name: { ko: \"음악가\", en: \"Musician\", ja: \"音楽家\", zh: \"音乐家\" }, icon: \"🎵\" },\n      { name: { ko: \"번역가\", en: \"Translator\", ja: \"翻訳者\", zh: \"翻译家\" }, icon: \"🌐\" },\n      { name: { ko: \"사진작가\", en: \"Photographer\", ja: \"写真家\", zh: \"摄影师\" }, icon: \"📸\" },\n      { name: { ko: \"비영리 활동가\", en: \"Non-profit Worker\", ja: \"非営利活動家\", zh: \"非营利工作者\" }, icon: \"❤️\" }\n    ]\n  },\n  ENFJ: {\n    title: {\n      ko: \"주인공\",\n      en: \"The Protagonist\",\n      ja: \"主人公\",\n      zh: \"主人公\"\n    },\n    subtitle: {\n      ko: \"The Protagonist\",\n      en: \"The Protagonist\",\n      ja: \"The Protagonist\", \n      zh: \"The Protagonist\"\n    },\n    description: {\n      ko: \"카리스마 있고 영감을 주는 지도자로, 듣는 이들을 매혹시킵니다.\",\n      en: \"Charismatic and inspiring leaders, able to mesmerize their listeners.\",\n      ja: \"カリスマ的でインスピレーションを与えるリーダーで、聞く人を魅了することができます。\",\n      zh: \"具有魅力和鼓舞人心的领导者，能够吸引听众。\"\n    },\n    strengths: {\n      ko: [\"탁월한 의사소통\", \"타인에 대한 관심\", \"자연스러운 리더십\", \"영감을 주는 능력\"],\n      en: [\"Excellent communication\", \"Concern for others\", \"Natural leadership\", \"Inspiring ability\"],\n      ja: [\"優れたコミュニケーション\", \"他人への関心\", \"自然なリーダーシップ\", \"インスピレーションを与える能力\"],\n      zh: [\"出色的沟通能力\", \"关心他人\", \"天生的领导力\", \"鼓舞人心的能力\"]\n    },\n    weaknesses: {\n      ko: [\"타인의 문제에 과몰입\", \"비판에 민감\", \"결정 어려움\", \"자기관리 소홀\"],\n      en: [\"Over-involvement in others' problems\", \"Sensitive to criticism\", \"Decision difficulties\", \"Self-care neglect\"],\n      ja: [\"他人の問題への過度な没入\", \"批判に敏感\", \"決定困難\", \"自己管理疎か\"],\n      zh: [\"过度参与他人问题\", \"对批评敏感\", \"决策困难\", \"忽视自我照顾\"]\n    },\n    careers: [\n      { name: { ko: \"교육자\", en: \"Educator\", ja: \"教育者\", zh: \"教育工作者\" }, icon: \"🎓\" },\n      { name: { ko: \"인사 관리자\", en: \"HR Manager\", ja: \"人事マネージャー\", zh: \"人力资源经理\" }, icon: \"👥\" },\n      { name: { ko: \"목사/성직자\", en: \"Minister/Clergy\", ja: \"牧師/聖職者\", zh: \"牧师/神职人员\" }, icon: \"⛪\" },\n      { name: { ko: \"코치\", en: \"Coach\", ja: \"コーチ\", zh: \"教练\" }, icon: \"🏆\" },\n      { name: { ko: \"이벤트 기획자\", en: \"Event Planner\", ja: \"イベントプランナー\", zh: \"活动策划师\" }, icon: \"🎉\" },\n      { name: { ko: \"정치인\", en: \"Politician\", ja: \"政治家\", zh: \"政治家\" }, icon: \"🏛️\" }\n    ]\n  },\n  ENFP: {\n    title: {\n      ko: \"활동가\",\n      en: \"The Campaigner\",\n      ja: \"活動家\",\n      zh: \"活动家\"\n    },\n    subtitle: {\n      ko: \"The Campaigner\",\n      en: \"The Campaigner\",\n      ja: \"The Campaigner\",\n      zh: \"The Campaigner\"\n    },\n    description: {\n      ko: \"열정적이고 창의적인 사교가로, 항상 새로운 가능성을 찾습니다.\",\n      en: \"Enthusiastic, creative and sociable free spirits, who can always find a reason to smile.\",\n      ja: \"熱狂的で創造的で社交的な自由な精神で、常に笑顔になる理由を見つけることができます。\",\n      zh: \"热情、有创造力、善于交际的自由精神，总能找到微笑的理由。\"\n    },\n    strengths: {\n      ko: [\"뛰어난 소통 능력\", \"창의적 사고\", \"열정적 에너지\", \"사람 중심적\"],\n      en: [\"Excellent communication\", \"Creative thinking\", \"Enthusiastic energy\", \"People-focused\"],\n      ja: [\"優れたコミュニケーション能力\", \"創造的思考\", \"熱狂的エネルギー\", \"人中心的\"],\n      zh: [\"出色的沟通能力\", \"创造性思维\", \"热情的能量\", \"以人为本\"]\n    },\n    weaknesses: {\n      ko: [\"집중력 부족\", \"스트레스에 민감\", \"세부사항 놓침\", \"루틴 업무 기피\"],\n      en: [\"Lack of focus\", \"Stress sensitivity\", \"Missing details\", \"Routine task avoidance\"],\n      ja: [\"集中力不足\", \"ストレスに敏感\", \"詳細見落とし\", \"ルーチン業務回避\"],\n      zh: [\"缺乏专注力\", \"对压力敏感\", \"忽略细节\", \"回避例行工作\"]\n    },\n    careers: [\n      { name: { ko: \"홍보/PR 전문가\", en: \"PR Specialist\", ja: \"PR専門家\", zh: \"公关专家\" }, icon: \"📢\" },\n      { name: { ko: \"배우\", en: \"Actor\", ja: \"俳優\", zh: \"演员\" }, icon: \"🎭\" },\n      { name: { ko: \"영업 담당자\", en: \"Sales Representative\", ja: \"営業担当者\", zh: \"销售代表\" }, icon: \"💼\" },\n      { name: { ko: \"상담사\", en: \"Counselor\", ja: \"カウンセラー\", zh: \"咨询师\" }, icon: \"🧠\" },\n      { name: { ko: \"기자\", en: \"Journalist\", ja: \"記者\", zh: \"记者\" }, icon: \"📰\" },\n      { name: { ko: \"이벤트 코디네이터\", en: \"Event Coordinator\", ja: \"イベントコーディネーター\", zh: \"活动协调员\" }, icon: \"🎪\" }\n    ]\n  }\n};\n\nexport const getLocalizedPersonalityType = (type: string, language: Language) => {\n  const multilangType = multiLanguagePersonalityTypes[type];\n  if (!multilangType) return null;\n  \n  return {\n    title: multilangType.title[language],\n    subtitle: multilangType.subtitle[language],\n    description: multilangType.description[language],\n    strengths: multilangType.strengths[language],\n    weaknesses: multilangType.weaknesses[language],\n    careers: multilangType.careers.map(career => ({\n      name: career.name[language],\n      icon: career.icon\n    }))\n  };\n};","size_bytes":22932},"client/src/data/personality-types.ts":{"content":"export interface PersonalityType {\n  title: string;\n  subtitle: string;\n  description: string;\n  strengths: string[];\n  weaknesses: string[];\n  careers: Array<{\n    name: string;\n    icon: string;\n  }>;\n}\n\nexport const personalityTypes: Record<string, PersonalityType> = {\n  INTJ: {\n    title: \"전략가\",\n    subtitle: \"The Architect\",\n    description: \"상상력이 풍부하고 전략적 사고를 하는 완벽주의자입니다. 모든 일에 계획이 있습니다.\",\n    strengths: [\n      \"뛰어난 전략적 사고\",\n      \"독립적이고 자율적\",\n      \"높은 목표 의식\",\n      \"창의적 문제 해결 능력\"\n    ],\n    weaknesses: [\n      \"지나친 완벽주의\",\n      \"타인의 감정 이해 부족\",\n      \"비판에 대한 민감성\",\n      \"사회적 상호작용의 어려움\"\n    ],\n    careers: [\n      { name: \"과학자/연구원\", icon: \"🔬\" },\n      { name: \"엔지니어\", icon: \"⚙️\" },\n      { name: \"경영 컨설턴트\", icon: \"📊\" },\n      { name: \"건축가\", icon: \"🏗️\" },\n      { name: \"투자 분석가\", icon: \"💹\" },\n      { name: \"시스템 분석가\", icon: \"💻\" }\n    ]\n  },\n  INTP: {\n    title: \"논리학자\",\n    subtitle: \"The Thinker\",\n    description: \"혁신적인 발명가로, 지식에 대한 갈증을 멈출 줄 모릅니다.\",\n    strengths: [\n      \"뛰어난 논리적 사고\",\n      \"높은 창의성\",\n      \"독립적 사고\",\n      \"복잡한 문제 해결 능력\"\n    ],\n    weaknesses: [\n      \"실행력 부족\",\n      \"감정 표현의 어려움\",\n      \"일상적 업무에 대한 무관심\",\n      \"타인과의 소통 부족\"\n    ],\n    careers: [\n      { name: \"프로그래머\", icon: \"💻\" },\n      { name: \"수학자\", icon: \"📐\" },\n      { name: \"철학자\", icon: \"💭\" },\n      { name: \"물리학자\", icon: \"🔬\" },\n      { name: \"게임 개발자\", icon: \"🎮\" },\n      { name: \"학자/교수\", icon: \"🎓\" }\n    ]\n  },\n  ENTJ: {\n    title: \"지휘관\",\n    subtitle: \"The Commander\",\n    description: \"타고난 지도자로, 카리스마와 자신감으로 공통 목표를 향해 사람들을 이끕니다.\",\n    strengths: [\n      \"강력한 리더십\",\n      \"뛰어난 조직 능력\",\n      \"목표 지향적\",\n      \"효율성 추구\"\n    ],\n    weaknesses: [\n      \"지나친 권위주의\",\n      \"타인의 감정 무시\",\n      \"참을성 부족\",\n      \"완고함\"\n    ],\n    careers: [\n      { name: \"CEO/경영진\", icon: \"👔\" },\n      { name: \"변호사\", icon: \"⚖️\" },\n      { name: \"정치인\", icon: \"🏛️\" },\n      { name: \"프로젝트 매니저\", icon: \"📋\" },\n      { name: \"투자 은행가\", icon: \"🏦\" },\n      { name: \"군사 지휘관\", icon: \"🎖️\" }\n    ]\n  },\n  ENTP: {\n    title: \"토론자\",\n    subtitle: \"The Debater\",\n    description: \"영리하고 호기심이 많은 사색가로, 지적 도전을 피하지 않습니다.\",\n    strengths: [\n      \"뛰어난 창의성\",\n      \"빠른 사고 능력\",\n      \"적응력\",\n      \"열정적인 토론 실력\"\n    ],\n    weaknesses: [\n      \"집중력 부족\",\n      \"일관성 결여\",\n      \"세부사항 무시\",\n      \"타인의 감정에 대한 둔감함\"\n    ],\n    careers: [\n      { name: \"발명가\", icon: \"💡\" },\n      { name: \"마케팅 전문가\", icon: \"📈\" },\n      { name: \"언론인\", icon: \"📰\" },\n      { name: \"창업가\", icon: \"🚀\" },\n      { name: \"컨설턴트\", icon: \"💼\" },\n      { name: \"광고 기획자\", icon: \"🎨\" }\n    ]\n  },\n  INFJ: {\n    title: \"옹호자\",\n    subtitle: \"The Advocate\",\n    description: \"선의를 가진 사람들을 돕는 이상주의자이지만, 뜻한 바를 이루는 데 필요한 의지력도 있습니다.\",\n    strengths: [\n      \"높은 통찰력\",\n      \"강한 도덕적 신념\",\n      \"타인에 대한 깊은 이해\",\n      \"창의적 사고\"\n    ],\n    weaknesses: [\n      \"지나친 완벽주의\",\n      \"비현실적 기대\",\n      \"갈등 회피\",\n      \"번아웃에 취약함\"\n    ],\n    careers: [\n      { name: \"심리상담사\", icon: \"🧠\" },\n      { name: \"작가\", icon: \"✍️\" },\n      { name: \"교사\", icon: \"👩‍🏫\" },\n      { name: \"사회복지사\", icon: \"🤝\" },\n      { name: \"종교인\", icon: \"⛪\" },\n      { name: \"예술가\", icon: \"🎨\" }\n    ]\n  },\n  INFP: {\n    title: \"중재자\",\n    subtitle: \"The Mediator\",\n    description: \"항상 선을 행할 준비가 되어 있는 이타주의자입니다.\",\n    strengths: [\n      \"강한 가치관\",\n      \"높은 창의성\",\n      \"타인에 대한 공감 능력\",\n      \"개방적 사고\"\n    ],\n    weaknesses: [\n      \"지나친 이상주의\",\n      \"비판에 대한 예민함\",\n      \"실용성 부족\",\n      \"자기 의심\"\n    ],\n    careers: [\n      { name: \"작가/시인\", icon: \"📝\" },\n      { name: \"그래픽 디자이너\", icon: \"🎨\" },\n      { name: \"상담사\", icon: \"💬\" },\n      { name: \"번역가\", icon: \"🌐\" },\n      { name: \"음악가\", icon: \"🎵\" },\n      { name: \"NGO 활동가\", icon: \"🌍\" }\n    ]\n  },\n  ENFJ: {\n    title: \"선도자\",\n    subtitle: \"The Protagonist\",\n    description: \"카리스마 넘치는 지도자로, 듣는 이들을 매혹하고 영감을 줍니다.\",\n    strengths: [\n      \"뛰어난 소통 능력\",\n      \"강한 공감 능력\",\n      \"타인 동기 부여 능력\",\n      \"조화로운 관계 구축\"\n    ],\n    weaknesses: [\n      \"지나친 타인 의존\",\n      \"자기 소홀\",\n      \"갈등에 대한 과민 반응\",\n      \"결정 장애\"\n    ],\n    careers: [\n      { name: \"교사/교육자\", icon: \"👨‍🏫\" },\n      { name: \"인사 담당자\", icon: \"👥\" },\n      { name: \"코치\", icon: \"🏃‍♂️\" },\n      { name: \"정치인\", icon: \"🗳️\" },\n      { name: \"종교 지도자\", icon: \"📿\" },\n      { name: \"상담사\", icon: \"💭\" }\n    ]\n  },\n  ENFP: {\n    title: \"활동가\",\n    subtitle: \"The Campaigner\",\n    description: \"열정적이고 창의적인 성격으로, 긍정적인 가능성을 보는 사람입니다.\",\n    strengths: [\n      \"높은 창의성과 상상력\",\n      \"뛰어난 소통능력\",\n      \"다른 사람들에게 영감을 주는 능력\",\n      \"유연하고 적응력이 뛰어남\"\n    ],\n    weaknesses: [\n      \"세부사항에 대한 주의력 부족\",\n      \"일상적인 업무에 대한 지루함\",\n      \"과도한 감정 이입\",\n      \"집중력 유지의 어려움\"\n    ],\n    careers: [\n      { name: \"예술가/디자이너\", icon: \"🎨\" },\n      { name: \"상담사/코치\", icon: \"👥\" },\n      { name: \"마케터/홍보전문가\", icon: \"📢\" },\n      { name: \"교육자/강사\", icon: \"👨‍🏫\" },\n      { name: \"작가/기자\", icon: \"✍️\" },\n      { name: \"영업/고객관리\", icon: \"🤝\" }\n    ]\n  },\n  ISTJ: {\n    title: \"현실주의자\",\n    subtitle: \"The Logistician\",\n    description: \"실용적이고 사실에 근거한 성격으로, 신뢰할 수 있는 성실함을 가지고 있습니다.\",\n    strengths: [\n      \"높은 책임감\",\n      \"체계적이고 조직적\",\n      \"신뢰성과 성실함\",\n      \"세심한 주의력\"\n    ],\n    weaknesses: [\n      \"변화에 대한 저항\",\n      \"융통성 부족\",\n      \"새로운 아이디어에 대한 회의\",\n      \"감정 표현의 어려움\"\n    ],\n    careers: [\n      { name: \"회계사\", icon: \"📊\" },\n      { name: \"관리자\", icon: \"📋\" },\n      { name: \"의사\", icon: \"👨‍⚕️\" },\n      { name: \"변호사\", icon: \"⚖️\" },\n      { name: \"은행원\", icon: \"🏦\" },\n      { name: \"공무원\", icon: \"🏛️\" }\n    ]\n  },\n  ISFJ: {\n    title: \"보호자\",\n    subtitle: \"The Protector\",\n    description: \"따뜻하고 헌신적인 성격으로, 언제나 사랑하는 사람들을 지킬 준비가 되어 있습니다.\",\n    strengths: [\n      \"타인에 대한 깊은 배려\",\n      \"높은 책임감\",\n      \"세심한 관찰력\",\n      \"조화로운 관계 추구\"\n    ],\n    weaknesses: [\n      \"자기주장 부족\",\n      \"변화에 대한 스트레스\",\n      \"과도한 자기희생\",\n      \"비판에 대한 민감성\"\n    ],\n    careers: [\n      { name: \"간호사\", icon: \"👩‍⚕️\" },\n      { name: \"초등학교 교사\", icon: \"👨‍🏫\" },\n      { name: \"사서\", icon: \"📚\" },\n      { name: \"상담사\", icon: \"💬\" },\n      { name: \"사회복지사\", icon: \"🤝\" },\n      { name: \"비서\", icon: \"📝\" }\n    ]\n  },\n  ESTJ: {\n    title: \"경영자\",\n    subtitle: \"The Executive\",\n    description: \"뛰어난 관리자로, 사람이나 일을 관리하는 데 타고난 재능이 있습니다.\",\n    strengths: [\n      \"강력한 리더십\",\n      \"뛰어난 조직 능력\",\n      \"높은 책임감\",\n      \"현실적 판단력\"\n    ],\n    weaknesses: [\n      \"고집이 세고 융통성 부족\",\n      \"타인의 감정에 대한 둔감함\",\n      \"지나친 권위주의\",\n      \"변화에 대한 저항\"\n    ],\n    careers: [\n      { name: \"관리자/임원\", icon: \"👔\" },\n      { name: \"판사\", icon: \"⚖️\" },\n      { name: \"경찰관\", icon: \"👮‍♂️\" },\n      { name: \"군인\", icon: \"🎖️\" },\n      { name: \"은행 지점장\", icon: \"🏦\" },\n      { name: \"프로젝트 관리자\", icon: \"📋\" }\n    ]\n  },\n  ESFJ: {\n    title: \"집정관\",\n    subtitle: \"The Consul\",\n    description: \"배려심이 많고 사교적이며 인기가 많은 성격으로, 언제나 도움을 주려 합니다.\",\n    strengths: [\n      \"뛰어난 대인관계 능력\",\n      \"강한 책임감\",\n      \"타인에 대한 배려\",\n      \"협력적 태도\"\n    ],\n    weaknesses: [\n      \"비판에 대한 과민 반응\",\n      \"갈등 상황에서의 스트레스\",\n      \"자기주장의 어려움\",\n      \"변화에 대한 불안\"\n    ],\n    careers: [\n      { name: \"간호사\", icon: \"👩‍⚕️\" },\n      { name: \"교사\", icon: \"👨‍🏫\" },\n      { name: \"인사 담당자\", icon: \"👥\" },\n      { name: \"이벤트 기획자\", icon: \"🎉\" },\n      { name: \"호텔리어\", icon: \"🏨\" },\n      { name: \"영업 사원\", icon: \"💼\" }\n    ]\n  },\n  ISTP: {\n    title: \"만능 재주꾼\",\n    subtitle: \"The Virtuoso\",\n    description: \"대담하고 실용적인 사고를 가진 실험정신이 풍부한 사람입니다.\",\n    strengths: [\n      \"뛰어난 문제 해결 능력\",\n      \"실용적 사고\",\n      \"위기 상황에서의 침착함\",\n      \"독립적 성향\"\n    ],\n    weaknesses: [\n      \"감정 표현의 어려움\",\n      \"장기적 계획 부족\",\n      \"타인과의 소통 부족\",\n      \"일상적 업무에 대한 무관심\"\n    ],\n    careers: [\n      { name: \"기계공/수리공\", icon: \"🔧\" },\n      { name: \"파일럿\", icon: \"✈️\" },\n      { name: \"프로그래머\", icon: \"💻\" },\n      { name: \"경찰관\", icon: \"👮‍♂️\" },\n      { name: \"소방관\", icon: \"🚒\" },\n      { name: \"의료 기술자\", icon: \"🏥\" }\n    ]\n  },\n  ISFP: {\n    title: \"모험가\",\n    subtitle: \"The Adventurer\",\n    description: \"유연하고 매력적인 예술가로, 언제나 새로운 가능성을 탐구합니다.\",\n    strengths: [\n      \"높은 예술적 감각\",\n      \"타인에 대한 깊은 공감\",\n      \"유연하고 개방적\",\n      \"평화를 추구하는 성향\"\n    ],\n    weaknesses: [\n      \"자기주장의 어려움\",\n      \"스트레스에 대한 취약성\",\n      \"실용성 부족\",\n      \"경쟁 상황에 대한 부담감\"\n    ],\n    careers: [\n      { name: \"예술가/화가\", icon: \"🎨\" },\n      { name: \"음악가\", icon: \"🎵\" },\n      { name: \"사진작가\", icon: \"📷\" },\n      { name: \"상담사\", icon: \"💬\" },\n      { name: \"마사지 치료사\", icon: \"💆‍♀️\" },\n      { name: \"환경 보호 활동가\", icon: \"🌱\" }\n    ]\n  },\n  ESTP: {\n    title: \"사업가\",\n    subtitle: \"The Entrepreneur\",\n    description: \"에너지 넘치고 인식이 뛰어난 성격으로 진정한 삶의 만능 재주꾼입니다.\",\n    strengths: [\n      \"뛰어난 현실 감각\",\n      \"적응력과 유연성\",\n      \"사교적이고 친근함\",\n      \"위기 상황에서의 대처 능력\"\n    ],\n    weaknesses: [\n      \"장기적 계획 부족\",\n      \"주의력 결핍\",\n      \"규칙에 대한 저항\",\n      \"감정적 깊이 부족\"\n    ],\n    careers: [\n      { name: \"영업 사원\", icon: \"💼\" },\n      { name: \"부동산 중개인\", icon: \"🏠\" },\n      { name: \"스포츠 선수\", icon: \"⚽\" },\n      { name: \"요리사\", icon: \"👨‍🍳\" },\n      { name: \"연예인\", icon: \"🎭\" },\n      { name: \"응급실 의사\", icon: \"🚑\" }\n    ]\n  },\n  ESFP: {\n    title: \"연예인\",\n    subtitle: \"The Entertainer\",\n    description: \"자유로운 영혼의 연예인으로, 주변 사람들을 즐겁게 하고 영감을 줍니다.\",\n    strengths: [\n      \"뛰어난 사교성\",\n      \"긍정적이고 낙천적\",\n      \"높은 공감 능력\",\n      \"예술적 감각\"\n    ],\n    weaknesses: [\n      \"장기적 계획 부족\",\n      \"비판에 대한 민감성\",\n      \"집중력 부족\",\n      \"갈등 회피 경향\"\n    ],\n    careers: [\n      { name: \"배우/연예인\", icon: \"🎭\" },\n      { name: \"이벤트 기획자\", icon: \"🎉\" },\n      { name: \"패션 디자이너\", icon: \"👗\" },\n      { name: \"여행 가이드\", icon: \"🗺️\" },\n      { name: \"미용사\", icon: \"💇‍♀️\" },\n      { name: \"소매업 판매원\", icon: \"🛍️\" }\n    ]\n  }\n};","size_bytes":13312},"client/src/data/questions-i18n.ts":{"content":"import { Language } from \"@/hooks/useLanguage\";\n\nexport interface MultiLanguageQuestion {\n  id: number;\n  text: {\n    ko: string;\n    en: string;\n    ja: string;\n    zh: string;\n  };\n  dimension: \"EI\" | \"SN\" | \"TF\" | \"JP\";\n  options: [\n    { text: { ko: string; en: string; ja: string; zh: string; }; value: \"E\" | \"S\" | \"T\" | \"J\" },\n    { text: { ko: string; en: string; ja: string; zh: string; }; value: \"I\" | \"N\" | \"F\" | \"P\" }\n  ];\n}\n\nexport const multiLanguageQuestions: MultiLanguageQuestion[] = [\n  {\n    id: 1,\n    text: {\n      ko: \"파티에서 당신은 주로 어떻게 행동하나요?\",\n      en: \"How do you usually behave at parties?\",\n      ja: \"パーティーでは主にどのように行動しますか？\",\n      zh: \"在聚会上你通常如何表现？\"\n    },\n    dimension: \"EI\",\n    options: [\n      { \n        text: {\n          ko: \"여러 사람들과 활발하게 대화하며 에너지를 얻는다\",\n          en: \"I get energized by actively talking with many people\",\n          ja: \"多くの人と活発に会話してエネルギーを得る\",\n          zh: \"与很多人积极交谈并获得能量\"\n        }, \n        value: \"E\" \n      },\n      { \n        text: {\n          ko: \"소수의 친한 사람들과 깊은 대화를 나누는 것을 선호한다\",\n          en: \"I prefer having deep conversations with a few close friends\",\n          ja: \"少数の親しい人と深い会話を交わすことを好む\",\n          zh: \"更喜欢与少数亲密朋友深入交谈\"\n        }, \n        value: \"I\" \n      }\n    ]\n  },\n  {\n    id: 2,\n    text: {\n      ko: \"새로운 프로젝트를 시작할 때 당신의 접근 방식은?\",\n      en: \"What's your approach when starting a new project?\",\n      ja: \"新しいプロジェクトを始める時のあなたのアプローチは？\",\n      zh: \"开始新项目时你的方法是？\"\n    },\n    dimension: \"SN\",\n    options: [\n      { \n        text: {\n          ko: \"구체적인 계획과 세부사항부터 정리한다\",\n          en: \"I organize specific plans and details first\",\n          ja: \"具体的な計画と詳細から整理する\",\n          zh: \"首先整理具体计划和细节\"\n        }, \n        value: \"S\" \n      },\n      { \n        text: {\n          ko: \"큰 그림과 가능성을 먼저 생각한다\",\n          en: \"I think about the big picture and possibilities first\",\n          ja: \"大きな絵と可能性を最初に考える\",\n          zh: \"首先考虑大局和可能性\"\n        }, \n        value: \"N\" \n      }\n    ]\n  },\n  {\n    id: 3,\n    text: {\n      ko: \"중요한 결정을 내릴 때 무엇을 더 중요하게 생각하나요?\",\n      en: \"What do you consider more important when making important decisions?\",\n      ja: \"重要な決定を下す時、何をより重要に考えますか？\",\n      zh: \"做重要决定时你认为什么更重要？\"\n    },\n    dimension: \"TF\",\n    options: [\n      { \n        text: {\n          ko: \"논리적이고 객관적인 분석\",\n          en: \"Logical and objective analysis\",\n          ja: \"論理的で客観的な分析\",\n          zh: \"逻辑和客观分析\"\n        }, \n        value: \"T\" \n      },\n      { \n        text: {\n          ko: \"사람들의 감정과 가치관\",\n          en: \"People's emotions and values\",\n          ja: \"人々の感情と価値観\",\n          zh: \"人们的情感和价值观\"\n        }, \n        value: \"F\" \n      }\n    ]\n  },\n  {\n    id: 4,\n    text: {\n      ko: \"일상생활에서 당신은?\",\n      en: \"In your daily life, you:\",\n      ja: \"日常生活であなたは？\",\n      zh: \"在日常生活中你：\"\n    },\n    dimension: \"JP\",\n    options: [\n      { \n        text: {\n          ko: \"계획을 세우고 그에 따라 행동한다\",\n          en: \"Make plans and act according to them\",\n          ja: \"計画を立ててそれに従って行動する\",\n          zh: \"制定计划并按计划行动\"\n        }, \n        value: \"J\" \n      },\n      { \n        text: {\n          ko: \"상황에 맞춰 유연하게 대처한다\",\n          en: \"Adapt flexibly to situations\",\n          ja: \"状況に合わせて柔軟に対処する\",\n          zh: \"根据情况灵活应对\"\n        }, \n        value: \"P\" \n      }\n    ]\n  },\n  {\n    id: 5,\n    text: {\n      ko: \"휴식을 취할 때 당신은?\",\n      en: \"When you take a break, you:\",\n      ja: \"休憩を取る時、あなたは？\",\n      zh: \"休息时你：\"\n    },\n    dimension: \"EI\",\n    options: [\n      { \n        text: {\n          ko: \"친구들과 함께 활동적인 시간을 보낸다\",\n          en: \"Spend active time with friends\",\n          ja: \"友達と一緒に活動的な時間を過ごす\",\n          zh: \"与朋友一起度过活跃的时光\"\n        }, \n        value: \"E\" \n      },\n      { \n        text: {\n          ko: \"혼자서 조용히 책을 읽거나 취미 활동을 한다\",\n          en: \"Read quietly alone or engage in hobbies\",\n          ja: \"一人で静かに本を読んだり趣味活動をする\",\n          zh: \"独自安静地读书或进行爱好活动\"\n        }, \n        value: \"I\" \n      }\n    ]\n  },\n  {\n    id: 6,\n    text: {\n      ko: \"정보를 처리할 때 당신은?\",\n      en: \"When processing information, you:\",\n      ja: \"情報を処理する時、あなたは？\",\n      zh: \"处理信息时你：\"\n    },\n    dimension: \"SN\",\n    options: [\n      { \n        text: {\n          ko: \"현실적이고 실용적인 사실에 집중한다\",\n          en: \"Focus on realistic and practical facts\",\n          ja: \"現実的で実用的な事実に集中する\",\n          zh: \"专注于现实和实用的事实\"\n        }, \n        value: \"S\" \n      },\n      { \n        text: {\n          ko: \"패턴과 미래의 가능성을 탐색한다\",\n          en: \"Explore patterns and future possibilities\",\n          ja: \"パターンと将来の可能性を探求する\",\n          zh: \"探索模式和未来可能性\"\n        }, \n        value: \"N\" \n      }\n    ]\n  },\n  {\n    id: 7,\n    text: {\n      ko: \"갈등 상황에서 당신은?\",\n      en: \"In conflict situations, you:\",\n      ja: \"対立状況で、あなたは？\",\n      zh: \"在冲突情况下你：\"\n    },\n    dimension: \"TF\",\n    options: [\n      { \n        text: {\n          ko: \"공정하고 논리적인 해결책을 찾는다\",\n          en: \"Seek fair and logical solutions\",\n          ja: \"公平で論理的な解決策を見つける\",\n          zh: \"寻找公平和逻辑的解决方案\"\n        }, \n        value: \"T\" \n      },\n      { \n        text: {\n          ko: \"모든 사람의 감정을 고려하며 조화를 추구한다\",\n          en: \"Consider everyone's feelings and seek harmony\",\n          ja: \"すべての人の感情を考慮し調和を求める\",\n          zh: \"考虑每个人的感受并寻求和谐\"\n        }, \n        value: \"F\" \n      }\n    ]\n  },\n  {\n    id: 8,\n    text: {\n      ko: \"마감일이 다가올 때 당신은?\",\n      en: \"When deadlines approach, you:\",\n      ja: \"締切が近づいた時、あなたは？\",\n      zh: \"当截止日期临近时你：\"\n    },\n    dimension: \"JP\",\n    options: [\n      { \n        text: {\n          ko: \"미리 계획하고 준비해서 여유롭게 완료한다\",\n          en: \"Plan ahead and complete with time to spare\",\n          ja: \"事前に計画し準備して余裕を持って完了する\",\n          zh: \"提前计划准备并从容完成\"\n        }, \n        value: \"J\" \n      },\n      { \n        text: {\n          ko: \"압박감을 느끼며 마지막 순간에 집중해서 한다\",\n          en: \"Feel pressure and focus intensely at the last moment\",\n          ja: \"プレッシャーを感じながら最後の瞬間に集中して行う\",\n          zh: \"感受压力并在最后时刻集中精力\"\n        }, \n        value: \"P\" \n      }\n    ]\n  },\n  {\n    id: 9,\n    text: {\n      ko: \"새로운 사람들과의 모임에서 당신은?\",\n      en: \"At gatherings with new people, you:\",\n      ja: \"新しい人たちとの集まりで、あなたは？\",\n      zh: \"在与新朋友的聚会中你：\"\n    },\n    dimension: \"EI\",\n    options: [\n      { \n        text: {\n          ko: \"적극적으로 다가가서 새로운 인맥을 만든다\",\n          en: \"Actively approach others and make new connections\",\n          ja: \"積極的に近づいて新しい人脈を作る\",\n          zh: \"主动接近他人建立新联系\"\n        }, \n        value: \"E\" \n      },\n      { \n        text: {\n          ko: \"상대방이 먼저 다가올 때까지 기다린다\",\n          en: \"Wait for others to approach you first\",\n          ja: \"相手が最初に近づいてくるまで待つ\",\n          zh: \"等待对方先主动接近\"\n        }, \n        value: \"I\" \n      }\n    ]\n  },\n  {\n    id: 10,\n    text: {\n      ko: \"학습할 때 당신은?\",\n      en: \"When learning, you:\",\n      ja: \"学習する時、あなたは？\",\n      zh: \"学习时你：\"\n    },\n    dimension: \"SN\",\n    options: [\n      { \n        text: {\n          ko: \"단계별로 체계적으로 접근한다\",\n          en: \"Approach systematically step by step\",\n          ja: \"段階的に体系的にアプローチする\",\n          zh: \"系统地逐步学习\"\n        }, \n        value: \"S\" \n      },\n      { \n        text: {\n          ko: \"전체적인 개념을 먼저 이해하고 세부사항으로 들어간다\",\n          en: \"Understand overall concepts first, then go into details\",\n          ja: \"全体的な概念を最初に理解してから詳細に入る\",\n          zh: \"先理解整体概念再深入细节\"\n        }, \n        value: \"N\" \n      }\n    ]\n  },\n  {\n    id: 11,\n    text: {\n      ko: \"팀 프로젝트에서 당신의 역할은?\",\n      en: \"What's your role in team projects?\",\n      ja: \"チームプロジェクトでのあなたの役割は？\",\n      zh: \"在团队项目中你的角色是？\"\n    },\n    dimension: \"TF\",\n    options: [\n      { \n        text: {\n          ko: \"효율성과 성과에 집중하며 목표 달성을 이끈다\",\n          en: \"Focus on efficiency and results, leading goal achievement\",\n          ja: \"効率性と成果に集中し目標達成を導く\",\n          zh: \"专注于效率和成果，引领目标达成\"\n        }, \n        value: \"T\" \n      },\n      { \n        text: {\n          ko: \"팀의 화합과 구성원들의 만족을 중시한다\",\n          en: \"Value team harmony and member satisfaction\",\n          ja: \"チームの調和とメンバーの満足を重視する\",\n          zh: \"重视团队和谐和成员满意度\"\n        }, \n        value: \"F\" \n      }\n    ]\n  },\n  {\n    id: 12,\n    text: {\n      ko: \"여행을 계획할 때 당신은?\",\n      en: \"When planning a trip, you:\",\n      ja: \"旅行を計画する時、あなたは？\",\n      zh: \"计划旅行时你：\"\n    },\n    dimension: \"JP\",\n    options: [\n      { \n        text: {\n          ko: \"상세한 일정표를 만들고 예약을 미리 한다\",\n          en: \"Create detailed itineraries and make reservations in advance\",\n          ja: \"詳細なスケジュールを作り予約を事前に行う\",\n          zh: \"制定详细行程并提前预订\"\n        }, \n        value: \"J\" \n      },\n      { \n        text: {\n          ko: \"대략적인 계획만 세우고 현지에서 유연하게 결정한다\",\n          en: \"Make rough plans and decide flexibly on location\",\n          ja: \"大まかな計画だけ立てて現地で柔軟に決定する\",\n          zh: \"制定大致计划并在当地灵活决定\"\n        }, \n        value: \"P\" \n      }\n    ]\n  },\n  {\n    id: 13,\n    text: {\n      ko: \"스트레스를 받을 때 당신은?\",\n      en: \"When you're stressed, you:\",\n      ja: \"ストレスを受けた時、あなたは？\",\n      zh: \"感到压力时你：\"\n    },\n    dimension: \"EI\",\n    options: [\n      { \n        text: {\n          ko: \"친구들과 이야기하며 스트레스를 해소한다\",\n          en: \"Talk with friends to relieve stress\",\n          ja: \"友達と話してストレスを解消する\",\n          zh: \"与朋友交谈来缓解压力\"\n        }, \n        value: \"E\" \n      },\n      { \n        text: {\n          ko: \"혼자만의 시간을 가지며 내면을 정리한다\",\n          en: \"Have alone time to organize your thoughts\",\n          ja: \"一人の時間を持って内面を整理する\",\n          zh: \"独处时间整理内心\"\n        }, \n        value: \"I\" \n      }\n    ]\n  },\n  {\n    id: 14,\n    text: {\n      ko: \"문제를 해결할 때 당신은?\",\n      en: \"When solving problems, you:\",\n      ja: \"問題を解決する時、あなたは？\",\n      zh: \"解决问题时你：\"\n    },\n    dimension: \"SN\",\n    options: [\n      { \n        text: {\n          ko: \"검증된 방법과 과거 경험을 활용한다\",\n          en: \"Use proven methods and past experiences\",\n          ja: \"実証された方法と過去の経験を活用する\",\n          zh: \"运用已验证的方法和过去经验\"\n        }, \n        value: \"S\" \n      },\n      { \n        text: {\n          ko: \"창의적이고 혁신적인 접근을 시도한다\",\n          en: \"Try creative and innovative approaches\",\n          ja: \"創造的で革新的なアプローチを試みる\",\n          zh: \"尝试创新和创造性方法\"\n        }, \n        value: \"N\" \n      }\n    ]\n  },\n  {\n    id: 15,\n    text: {\n      ko: \"비판을 받을 때 당신은?\",\n      en: \"When receiving criticism, you:\",\n      ja: \"批判を受けた時、あなたは？\",\n      zh: \"接受批评时你：\"\n    },\n    dimension: \"TF\",\n    options: [\n      { \n        text: {\n          ko: \"객관적으로 분석하고 개선점을 찾는다\",\n          en: \"Analyze objectively and find areas for improvement\",\n          ja: \"客観的に分析し改善点を見つける\",\n          zh: \"客观分析并找到改进点\"\n        }, \n        value: \"T\" \n      },\n      { \n        text: {\n          ko: \"감정적으로 상처받고 관계에 대해 걱정한다\",\n          en: \"Feel emotionally hurt and worry about relationships\",\n          ja: \"感情的に傷つき関係について心配する\",\n          zh: \"情感上受伤并担心人际关系\"\n        }, \n        value: \"F\" \n      }\n    ]\n  },\n  {\n    id: 16,\n    text: {\n      ko: \"하루 일과를 마친 후 당신은?\",\n      en: \"After finishing your daily tasks, you:\",\n      ja: \"一日の業務を終えた後、あなたは？\",\n      zh: \"完成一天的工作后你：\"\n    },\n    dimension: \"JP\",\n    options: [\n      { \n        text: {\n          ko: \"다음날을 위한 준비와 계획을 세운다\",\n          en: \"Prepare and plan for the next day\",\n          ja: \"翌日のための準備と計画を立てる\",\n          zh: \"为第二天做准备和计划\"\n        }, \n        value: \"J\" \n      },\n      { \n        text: {\n          ko: \"그 순간의 기분에 따라 자유롭게 행동한다\",\n          en: \"Act freely according to your mood at the moment\",\n          ja: \"その瞬間の気分に従って自由に行動する\",\n          zh: \"根据当时的心情自由行动\"\n        }, \n        value: \"P\" \n      }\n    ]\n  },\n  {\n    id: 17,\n    text: {\n      ko: \"새로운 아이디어가 떠올랐을 때 당신은?\",\n      en: \"When you have a new idea, you:\",\n      ja: \"新しいアイデアが浮かんだ時、あなたは？\",\n      zh: \"想到新想法时你：\"\n    },\n    dimension: \"EI\",\n    options: [\n      { \n        text: {\n          ko: \"즉시 다른 사람들과 공유하고 토론한다\",\n          en: \"Immediately share and discuss with others\",\n          ja: \"すぐに他の人と共有し議論する\",\n          zh: \"立即与他人分享和讨论\"\n        }, \n        value: \"E\" \n      },\n      { \n        text: {\n          ko: \"혼자서 충분히 생각하고 정리한 후 공유한다\",\n          en: \"Think it through alone and organize before sharing\",\n          ja: \"一人で十分考えて整理してから共有する\",\n          zh: \"独自充分思考整理后再分享\"\n        }, \n        value: \"I\" \n      }\n    ]\n  },\n  {\n    id: 18,\n    text: {\n      ko: \"의사결정을 할 때 당신이 신뢰하는 것은?\",\n      en: \"What do you trust when making decisions?\",\n      ja: \"意思決定をする時、あなたが信頼するのは？\",\n      zh: \"做决策时你信赖什么？\"\n    },\n    dimension: \"SN\",\n    options: [\n      { \n        text: {\n          ko: \"구체적인 데이터와 사실\",\n          en: \"Concrete data and facts\",\n          ja: \"具体的なデータと事実\",\n          zh: \"具体数据和事实\"\n        }, \n        value: \"S\" \n      },\n      { \n        text: {\n          ko: \"직감과 통찰\",\n          en: \"Intuition and insights\",\n          ja: \"直感と洞察\",\n          zh: \"直觉和洞察力\"\n        }, \n        value: \"N\" \n      }\n    ]\n  },\n  {\n    id: 19,\n    text: {\n      ko: \"타인과의 관계에서 가장 중요하게 생각하는 것은?\",\n      en: \"What's most important in relationships with others?\",\n      ja: \"他人との関係で最も重要に思うことは？\",\n      zh: \"与他人关系中最重要的是什么？\"\n    },\n    dimension: \"TF\",\n    options: [\n      { \n        text: {\n          ko: \"상호 존중과 정직함\",\n          en: \"Mutual respect and honesty\",\n          ja: \"相互尊重と正直さ\",\n          zh: \"相互尊重和诚实\"\n        }, \n        value: \"T\" \n      },\n      { \n        text: {\n          ko: \"따뜻함과 이해심\",\n          en: \"Warmth and understanding\",\n          ja: \"温かさと理解\",\n          zh: \"温暖和理解\"\n        }, \n        value: \"F\" \n      }\n    ]\n  },\n  {\n    id: 20,\n    text: {\n      ko: \"변화에 직면했을 때 당신은?\",\n      en: \"When facing change, you:\",\n      ja: \"変化に直面した時、あなたは？\",\n      zh: \"面对变化时你：\"\n    },\n    dimension: \"JP\",\n    options: [\n      { \n        text: {\n          ko: \"신중하게 계획을 세우고 단계적으로 적응한다\",\n          en: \"Plan carefully and adapt step by step\",\n          ja: \"慎重に計画を立てて段階的に適応する\",\n          zh: \"谨慎计划并逐步适应\"\n        }, \n        value: \"J\" \n      },\n      { \n        text: {\n          ko: \"변화를 받아들이고 유연하게 대응한다\",\n          en: \"Embrace change and respond flexibly\",\n          ja: \"変化を受け入れて柔軟に対応する\",\n          zh: \"接受变化并灵活应对\"\n        }, \n        value: \"P\" \n      }\n    ]\n  }\n];\n\nexport const getLocalizedQuestion = (question: MultiLanguageQuestion, language: Language) => {\n  return {\n    id: question.id,\n    text: question.text[language],\n    dimension: question.dimension,\n    options: question.options.map(option => ({\n      text: option.text[language],\n      value: option.value\n    }))\n  };\n};","size_bytes":18888},"client/src/data/questions.ts":{"content":"export interface Question {\n  id: number;\n  text: string;\n  dimension: \"EI\" | \"SN\" | \"TF\" | \"JP\";\n  options: [\n    { text: string; value: \"E\" | \"S\" | \"T\" | \"J\" },\n    { text: string; value: \"I\" | \"N\" | \"F\" | \"P\" }\n  ];\n}\n\nexport const questions: Question[] = [\n  {\n    id: 1,\n    text: \"파티에서 당신은 주로 어떻게 행동하나요?\",\n    dimension: \"EI\",\n    options: [\n      { text: \"여러 사람들과 활발하게 대화하며 에너지를 얻는다\", value: \"E\" },\n      { text: \"소수의 친한 사람들과 깊은 대화를 나누는 것을 선호한다\", value: \"I\" }\n    ]\n  },\n  {\n    id: 2,\n    text: \"새로운 프로젝트를 시작할 때 당신의 접근 방식은?\",\n    dimension: \"SN\",\n    options: [\n      { text: \"구체적인 계획과 세부사항부터 정리한다\", value: \"S\" },\n      { text: \"큰 그림과 가능성을 먼저 생각한다\", value: \"N\" }\n    ]\n  },\n  {\n    id: 3,\n    text: \"중요한 결정을 내릴 때 무엇을 더 중요하게 생각하나요?\",\n    dimension: \"TF\",\n    options: [\n      { text: \"논리적이고 객관적인 분석\", value: \"T\" },\n      { text: \"사람들의 감정과 가치관\", value: \"F\" }\n    ]\n  },\n  {\n    id: 4,\n    text: \"일상생활에서 당신은?\",\n    dimension: \"JP\",\n    options: [\n      { text: \"계획을 세우고 그에 따라 행동한다\", value: \"J\" },\n      { text: \"상황에 맞춰 유연하게 대처한다\", value: \"P\" }\n    ]\n  },\n  {\n    id: 5,\n    text: \"휴식을 취할 때 당신은?\",\n    dimension: \"EI\",\n    options: [\n      { text: \"친구들과 함께 활동적인 시간을 보낸다\", value: \"E\" },\n      { text: \"혼자서 조용히 책을 읽거나 취미 활동을 한다\", value: \"I\" }\n    ]\n  },\n  {\n    id: 6,\n    text: \"새로운 정보를 받아들일 때?\",\n    dimension: \"SN\",\n    options: [\n      { text: \"현실적이고 실용적인 정보에 집중한다\", value: \"S\" },\n      { text: \"숨어있는 의미나 패턴을 찾으려 한다\", value: \"N\" }\n    ]\n  },\n  {\n    id: 7,\n    text: \"팀에서 갈등이 발생했을 때?\",\n    dimension: \"TF\",\n    options: [\n      { text: \"문제의 원인을 분석하고 해결책을 제시한다\", value: \"T\" },\n      { text: \"모든 사람의 의견을 듣고 조화를 이루려 한다\", value: \"F\" }\n    ]\n  },\n  {\n    id: 8,\n    text: \"여행 계획을 세울 때?\",\n    dimension: \"JP\",\n    options: [\n      { text: \"미리 일정과 숙소를 모두 예약한다\", value: \"J\" },\n      { text: \"대략적인 계획만 세우고 현지에서 결정한다\", value: \"P\" }\n    ]\n  },\n  {\n    id: 9,\n    text: \"새로운 사람들을 만날 때?\",\n    dimension: \"EI\",\n    options: [\n      { text: \"먼저 다가가서 대화를 시작한다\", value: \"E\" },\n      { text: \"상대방이 먼저 다가오기를 기다린다\", value: \"I\" }\n    ]\n  },\n  {\n    id: 10,\n    text: \"문제를 해결할 때?\",\n    dimension: \"SN\",\n    options: [\n      { text: \"과거의 경험과 검증된 방법을 사용한다\", value: \"S\" },\n      { text: \"새로운 아이디어나 창의적 방법을 시도한다\", value: \"N\" }\n    ]\n  },\n  {\n    id: 11,\n    text: \"비판을 받았을 때 당신의 반응은?\",\n    dimension: \"TF\",\n    options: [\n      { text: \"비판의 내용이 타당한지 객관적으로 판단한다\", value: \"T\" },\n      { text: \"상대방의 의도와 감정을 먼저 고려한다\", value: \"F\" }\n    ]\n  },\n  {\n    id: 12,\n    text: \"업무 환경에서 선호하는 방식은?\",\n    dimension: \"JP\",\n    options: [\n      { text: \"정해진 규칙과 절차에 따라 일한다\", value: \"J\" },\n      { text: \"자유롭고 융통성 있게 일한다\", value: \"P\" }\n    ]\n  },\n  {\n    id: 13,\n    text: \"스트레스를 받을 때?\",\n    dimension: \"EI\",\n    options: [\n      { text: \"다른 사람들과 이야기하며 스트레스를 푼다\", value: \"E\" },\n      { text: \"혼자만의 시간을 갖고 내적으로 정리한다\", value: \"I\" }\n    ]\n  },\n  {\n    id: 14,\n    text: \"학습할 때 선호하는 방식은?\",\n    dimension: \"SN\",\n    options: [\n      { text: \"단계별로 차근차근 배운다\", value: \"S\" },\n      { text: \"전체적인 개념을 먼저 이해한다\", value: \"N\" }\n    ]\n  },\n  {\n    id: 15,\n    text: \"다른 사람의 실수를 봤을 때?\",\n    dimension: \"TF\",\n    options: [\n      { text: \"실수를 지적하고 개선방안을 제안한다\", value: \"T\" },\n      { text: \"상대방의 기분을 고려해 조심스럽게 접근한다\", value: \"F\" }\n    ]\n  },\n  {\n    id: 16,\n    text: \"마감이 있는 일을 할 때?\",\n    dimension: \"JP\",\n    options: [\n      { text: \"미리 시작해서 여유 있게 완성한다\", value: \"J\" },\n      { text: \"마감 직전의 압박감을 활용해 집중한다\", value: \"P\" }\n    ]\n  },\n  {\n    id: 17,\n    text: \"취미 활동을 선택할 때?\",\n    dimension: \"EI\",\n    options: [\n      { text: \"여러 사람과 함께하는 단체 활동을 선호한다\", value: \"E\" },\n      { text: \"혼자서 할 수 있는 개인 활동을 선호한다\", value: \"I\" }\n    ]\n  },\n  {\n    id: 18,\n    text: \"영화나 책을 고를 때?\",\n    dimension: \"SN\",\n    options: [\n      { text: \"현실적이고 구체적인 내용을 선호한다\", value: \"S\" },\n      { text: \"상상력이 풍부하고 추상적인 내용을 선호한다\", value: \"N\" }\n    ]\n  },\n  {\n    id: 19,\n    text: \"친구가 고민 상담을 요청할 때?\",\n    dimension: \"TF\",\n    options: [\n      { text: \"해결책과 조언을 제공한다\", value: \"T\" },\n      { text: \"공감하고 감정적 지지를 제공한다\", value: \"F\" }\n    ]\n  },\n  {\n    id: 20,\n    text: \"새로운 환경에 적응할 때?\",\n    dimension: \"JP\",\n    options: [\n      { text: \"체계적으로 계획을 세워 적응한다\", value: \"J\" },\n      { text: \"상황에 따라 즉흥적으로 적응한다\", value: \"P\" }\n    ]\n  }\n];","size_bytes":5851},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAnalytics.ts":{"content":"import { useEffect } from 'react';\n\ninterface AnalyticsEvent {\n  event: string;\n  category?: string;\n  action?: string;\n  label?: string;\n  value?: number;\n}\n\nexport const useAnalytics = () => {\n  const trackEvent = (eventData: AnalyticsEvent) => {\n    // Google Analytics 이벤트 추적 (GA4)\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('event', eventData.action || eventData.event, {\n        event_category: eventData.category,\n        event_label: eventData.label,\n        value: eventData.value\n      });\n    }\n\n    // Console 로그로 개발 중 확인\n    console.log('Analytics Event:', eventData);\n  };\n\n  const trackPageView = (pageName: string) => {\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('config', 'GA_MEASUREMENT_ID', {\n        page_title: pageName,\n        page_location: window.location.href\n      });\n    }\n  };\n\n  const trackTestCompletion = (personalityType: string, completionTime: number) => {\n    trackEvent({\n      event: 'test_completed',\n      category: 'MBTI_Test',\n      action: 'completed',\n      label: personalityType,\n      value: completionTime\n    });\n  };\n\n  const trackTestStart = () => {\n    trackEvent({\n      event: 'test_started',\n      category: 'MBTI_Test',\n      action: 'started'\n    });\n  };\n\n  const trackShare = (platform: string, personalityType: string) => {\n    trackEvent({\n      event: 'result_shared',\n      category: 'Social_Share',\n      action: 'shared',\n      label: `${platform}_${personalityType}`\n    });\n  };\n\n  const trackLanguageChange = (newLanguage: string) => {\n    trackEvent({\n      event: 'language_changed',\n      category: 'User_Interaction',\n      action: 'language_change',\n      label: newLanguage\n    });\n  };\n\n  return {\n    trackEvent,\n    trackPageView,\n    trackTestCompletion,\n    trackTestStart,\n    trackShare,\n    trackLanguageChange\n  };\n};","size_bytes":1925},"client/src/hooks/useLanguage.ts":{"content":"import { useLanguageContext } from '@/contexts/LanguageContext';\n\nexport type { Language } from '@/contexts/LanguageContext';\n\ninterface Translations {\n  [key: string]: {\n    ko: string;\n    en: string;\n    ja: string;\n    zh: string;\n  };\n}\n\nexport const translations: Translations = {\n  // Header\n  'header.title': {\n    ko: 'MBTI 심리테스트',\n    en: 'MBTI Personality Test',\n    ja: 'MBTI性格診断テスト',\n    zh: 'MBTI性格测试'\n  },\n  'header.subtitle': {\n    ko: '당신의 성격유형을 발견해보세요',\n    en: 'Discover Your Personality Type',\n    ja: 'あなたの性格タイプを発見してください',\n    zh: '发现您的性格类型'\n  },\n  \n  // Welcome Screen\n  'welcome.title': {\n    ko: '성격유형 검사에 오신 것을 환영합니다',\n    en: 'Welcome to the Personality Type Test',\n    ja: '性格タイプテストへようこそ',\n    zh: '欢迎参加性格类型测试'\n  },\n  'welcome.description': {\n    ko: '20가지 질문을 통해 당신의 MBTI 성격유형을 알아보세요. 솔직하고 직관적으로 답변해주시면 더 정확한 결과를 얻을 수 있습니다.',\n    en: '20 questions to discover your MBTI personality type. Answer honestly and intuitively for more accurate results.',\n    ja: '20つの質問を通してあなたのMBTI性格タイプを調べてみてください。正直かつ直感的に答えてください。',\n    zh: '20道题了解您的MBTI性格类型。请诚实而直觉地回答以获得更准确的结果。'\n  },\n  'welcome.start': {\n    ko: '테스트 시작하기',\n    en: 'Start Test',\n    ja: 'テスト開始',\n    zh: '开始测试'\n  },\n  \n  // Progress\n  'progress.title': {\n    ko: '진행률',\n    en: 'Progress',\n    ja: '進行状況',\n    zh: '进度'\n  },\n  'question.label': {\n    ko: '질문',\n    en: 'Question',\n    ja: '質問',\n    zh: '问题'\n  },\n  \n  // Navigation\n  'nav.previous': {\n    ko: '이전',\n    en: 'Previous',\n    ja: '前へ',\n    zh: '上一个'\n  },\n  'nav.next': {\n    ko: '다음',\n    en: 'Next',\n    ja: '次へ',\n    zh: '下一个'\n  },\n  \n  // Results\n  'results.share': {\n    ko: '결과 공유하기',\n    en: 'Share Results',\n    ja: '結果をシェア',\n    zh: '分享结果'\n  },\n  'results.restart': {\n    ko: '다시 테스트하기',\n    en: 'Restart Test',\n    ja: 'テスト再開',\n    zh: '重新测试'\n  },\n  'results.strengths': {\n    ko: '주요 강점',\n    en: 'Key Strengths',\n    ja: '主な強み',\n    zh: '主要优势'\n  },\n  'results.weaknesses': {\n    ko: '개선점',\n    en: 'Areas for Growth',\n    ja: '改善点',\n    zh: '改进点'\n  },\n  'results.careers': {\n    ko: '추천 직업',\n    en: 'Recommended Careers',\n    ja: '推奨職業',\n    zh: '推荐职业'\n  },\n  \n  // Language\n  'language.korean': {\n    ko: '한국어',\n    en: '한국어',\n    ja: '韓国語',\n    zh: '韩语'\n  },\n  'language.english': {\n    ko: 'English',\n    en: 'English',\n    ja: 'English',\n    zh: 'English'\n  },\n  'language.japanese': {\n    ko: '日本語',\n    en: '日本語',\n    ja: '日本語',\n    zh: '日语'\n  },\n  'language.chinese': {\n    ko: '中文',\n    en: '中文',\n    ja: '中国語',\n    zh: '中文'\n  },\n\n  // Additional info texts\n  'info.duration': {\n    ko: '소요시간: 약 5-7분',\n    en: 'Duration: About 5-7 minutes',\n    ja: '所要時間：約5-7分',\n    zh: '所需时间：约5-7分钟'\n  },\n  'info.questions': {\n    ko: '총 {count}개 질문',\n    en: 'Total {count} questions',\n    ja: '合計{count}つの質問',\n    zh: '总共{count}道题'\n  },\n  'info.accuracy': {\n    ko: '정확한 성격분석',\n    en: 'Accurate personality analysis',\n    ja: '正確な性格分析',\n    zh: '准确的性格分析'\n  },\n  'info.privacy': {\n    ko: '개인정보 보호',\n    en: 'Privacy protected',\n    ja: 'プライバシー保護',\n    zh: '隐私保护'\n  },\n\n  // Home/Reset buttons\n  'button.home': {\n    ko: '처음으로',\n    en: 'Go Home',\n    ja: 'ホームへ',\n    zh: '返回首页'\n  },\n  'button.restart': {\n    ko: '다시하기',\n    en: 'Restart Test',\n    ja: 'テスト再開',\n    zh: '重新开始'\n  }\n};\n\nexport const useLanguage = () => {\n  const { language, changeLanguage } = useLanguageContext();\n\n  const t = (key: string): string => {\n    const result = translations[key]?.[language] || key;\n    return result;\n  };\n\n  return {\n    language,\n    changeLanguage,\n    t\n  };\n};","size_bytes":4424},"client/src/lib/mbti-calculator.ts":{"content":"import { Question } from \"@/data/questions\";\n\ntype Answer = \"A\" | \"B\";\ntype Answers = Record<number, Answer>;\n\nexport interface PersonalityScores {\n  E: number;\n  I: number;\n  S: number;\n  N: number;\n  T: number;\n  F: number;\n  J: number;\n  P: number;\n}\n\nexport interface MBTIResult {\n  type: string;\n  scores: PersonalityScores;\n}\n\nexport function calculateMBTI(answers: Answers, questions: Question[]): MBTIResult {\n  const scores: PersonalityScores = {\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  };\n\n  // Count scores for each dimension\n  Object.entries(answers).forEach(([questionId, answer]) => {\n    const question = questions.find(q => q.id === parseInt(questionId));\n    if (!question) return;\n\n    const selectedOption = question.options[answer === \"A\" ? 0 : 1];\n    scores[selectedOption.value]++;\n  });\n\n  // Calculate percentages\n  const totalQuestions = questions.length;\n  const dimensionCounts = {\n    EI: scores.E + scores.I,\n    SN: scores.S + scores.N,\n    TF: scores.T + scores.F,\n    JP: scores.J + scores.P\n  };\n\n  // Convert to percentages\n  const percentageScores: PersonalityScores = {\n    E: dimensionCounts.EI > 0 ? (scores.E / dimensionCounts.EI) * 100 : 50,\n    I: dimensionCounts.EI > 0 ? (scores.I / dimensionCounts.EI) * 100 : 50,\n    S: dimensionCounts.SN > 0 ? (scores.S / dimensionCounts.SN) * 100 : 50,\n    N: dimensionCounts.SN > 0 ? (scores.N / dimensionCounts.SN) * 100 : 50,\n    T: dimensionCounts.TF > 0 ? (scores.T / dimensionCounts.TF) * 100 : 50,\n    F: dimensionCounts.TF > 0 ? (scores.F / dimensionCounts.TF) * 100 : 50,\n    J: dimensionCounts.JP > 0 ? (scores.J / dimensionCounts.JP) * 100 : 50,\n    P: dimensionCounts.JP > 0 ? (scores.P / dimensionCounts.JP) * 100 : 50\n  };\n\n  // Determine personality type\n  const type = \n    (percentageScores.E > percentageScores.I ? \"E\" : \"I\") +\n    (percentageScores.S > percentageScores.N ? \"S\" : \"N\") +\n    (percentageScores.T > percentageScores.F ? \"T\" : \"F\") +\n    (percentageScores.J > percentageScores.P ? \"J\" : \"P\");\n\n  return {\n    type,\n    scores: percentageScores\n  };\n}\n","size_bytes":2106},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/mbti-test.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { questions } from \"@/data/questions\";\nimport { personalityTypes } from \"@/data/personality-types\";\nimport { multiLanguageQuestions, getLocalizedQuestion } from \"@/data/questions-i18n\";\nimport { getLocalizedPersonalityType } from \"@/data/personality-types-i18n\";\nimport { calculateMBTI } from \"@/lib/mbti-calculator\";\nimport { LanguageSelector } from \"@/components/LanguageSelector\";\nimport { ResultsAnalytics } from \"@/components/ResultsAnalytics\";\nimport { AdvancedFeatures } from \"@/components/AdvancedFeatures\";\nimport { SEOJsonLd } from \"@/components/SEOJsonLd\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useAnalytics } from \"@/hooks/useAnalytics\";\nimport { Brain, Clock, BarChart3, Shield, Star, AlertTriangle, Briefcase, ArrowLeft, ArrowRight, Share, Sparkles, Download, Heart } from \"lucide-react\";\n\ntype Screen = \"welcome\" | \"question\" | \"results\";\ntype Answer = \"A\" | \"B\";\ntype Answers = Record<number, Answer>;\n\ninterface PersonalityScores {\n  E: number;\n  I: number;\n  S: number;\n  N: number;\n  T: number;\n  F: number;\n  J: number;\n  P: number;\n}\n\nexport default function MBTITest() {\n  const [currentScreen, setCurrentScreen] = useState<Screen>(\"welcome\");\n  const [currentQuestion, setCurrentQuestion] = useState(1);\n  const [answers, setAnswers] = useState<Answers>({});\n  const [selectedAnswer, setSelectedAnswer] = useState<Answer | null>(null);\n  const [personalityType, setPersonalityType] = useState<string>(\"\");\n  const [scores, setScores] = useState<PersonalityScores | null>(null);\n  const [testStartTime, setTestStartTime] = useState<Date | null>(null);\n  const [testCompletionTime, setTestCompletionTime] = useState<number>(0);\n  const { t, language } = useLanguage();\n  const analytics = useAnalytics();\n\n  // 현재 언어에 맞는 질문과 성격 유형 데이터 가져오기\n  const localizedQuestions = useMemo(() => \n    multiLanguageQuestions.map(q => getLocalizedQuestion(q, language)), \n    [language]\n  );\n  const totalQuestions = localizedQuestions.length;\n\n  // 페이지 제목 동적 변경 (SEO)\n  useEffect(() => {\n    const titles = {\n      welcome: \"무료 MBTI 성격유형 테스트 - 정확한 16가지 성격 분석\",\n      question: `MBTI 테스트 진행중 (${currentQuestion}/${totalQuestions}) - 성격유형 검사`,\n      results: `${personalityType} ${personalityTypes[personalityType]?.title} - MBTI 테스트 결과`\n    };\n    document.title = titles[currentScreen];\n  }, [currentScreen, currentQuestion, personalityType]);\n\n  const progress = (currentQuestion / totalQuestions) * 100;\n\n  const startTest = () => {\n    setCurrentScreen(\"question\");\n    setCurrentQuestion(1);\n    setAnswers({});\n    setSelectedAnswer(null);\n    setTestStartTime(new Date());\n    analytics.trackTestStart();\n  };\n\n  const nextQuestion = () => {\n    if (!selectedAnswer) return;\n\n    const newAnswers = { ...answers, [currentQuestion]: selectedAnswer };\n    setAnswers(newAnswers);\n\n    if (currentQuestion < totalQuestions) {\n      setCurrentQuestion(currentQuestion + 1);\n      setSelectedAnswer(null);\n    } else {\n      // Calculate results - 원본 questions 사용\n      const result = calculateMBTI(newAnswers, questions);\n      setPersonalityType(result.type);\n      setScores(result.scores);\n      \n      // Calculate completion time\n      if (testStartTime) {\n        const completionTime = Math.round((new Date().getTime() - testStartTime.getTime()) / 1000);\n        setTestCompletionTime(completionTime);\n      }\n      \n      setCurrentScreen(\"results\");\n      \n      // Track completion\n      analytics.trackTestCompletion(result.type, testCompletionTime);\n      \n      // Save to local storage for future reference\n      const testResult = {\n        type: result.type,\n        scores: result.scores,\n        answers: newAnswers,\n        completedAt: new Date().toISOString(),\n        completionTime: testCompletionTime\n      };\n      localStorage.setItem('mbti-last-result', JSON.stringify(testResult));\n    }\n  };\n\n  const previousQuestion = () => {\n    if (currentQuestion > 1) {\n      setCurrentQuestion(currentQuestion - 1);\n      setSelectedAnswer(answers[currentQuestion - 1] || null);\n    }\n  };\n\n  const restartTest = () => {\n    setCurrentScreen(\"welcome\");\n    setCurrentQuestion(1);\n    setAnswers({});\n    setSelectedAnswer(null);\n    setPersonalityType(\"\");\n    setScores(null);\n    setTestStartTime(null);\n    setTestCompletionTime(0);\n    analytics.trackTestStart();\n  };\n\n  const goHome = () => {\n    setCurrentScreen(\"welcome\");\n    setCurrentQuestion(1);\n    setAnswers({});\n    setSelectedAnswer(null);\n    setPersonalityType(\"\");\n    setScores(null);\n    setTestStartTime(null);\n    setTestCompletionTime(0);\n  };\n\n  const shareResults = () => {\n    const shareText = `🧠 내 MBTI 결과: ${personalityType} (${personalityTypes[personalityType]?.title})\\n\\n✨ ${personalityTypes[personalityType]?.description}\\n\\n📊 완료 시간: ${Math.floor(testCompletionTime / 60)}분 ${testCompletionTime % 60}초\\n\\n🔗 당신도 테스트해보세요: ${window.location.origin}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: `내 MBTI 결과: ${personalityType}`,\n        text: shareText,\n        url: window.location.origin,\n      });\n      analytics.trackShare('native', personalityType);\n    } else {\n      navigator.clipboard.writeText(shareText);\n      alert(\"결과가 클립보드에 복사되었습니다! SNS에 붙여넣어 공유하세요.\");\n      analytics.trackShare('clipboard', personalityType);\n    }\n  };\n\n  const currentQuestionData = useMemo(() => \n    localizedQuestions[currentQuestion - 1], \n    [localizedQuestions, currentQuestion, language]\n  );\n  const personalityInfo = personalityType ? getLocalizedPersonalityType(personalityType, language) || personalityTypes[personalityType] : null;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* SEO JSON-LD */}\n      <SEOJsonLd \n        personalityType={personalityType}\n        personalityTitle={personalityInfo?.title}\n        testResult={currentScreen === \"results\"}\n      />\n      \n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-center flex-1\">\n              <h1 className=\"text-3xl font-bold text-dark\">{t('header.title')}</h1>\n              <p className=\"text-gray-600 mt-2\">{t('header.subtitle')}</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <LanguageSelector />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-4xl mx-auto px-4 py-8\">\n        {/* Welcome Screen */}\n        {currentScreen === \"welcome\" && (\n          <div className=\"text-center space-y-8\">\n            <Card className=\"p-8 md:p-12\">\n              <CardContent className=\"pt-6\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-primary to-secondary rounded-full mx-auto mb-6 flex items-center justify-center\">\n                  <Brain className=\"w-12 h-12 text-white\" />\n                </div>\n                <h2 className=\"text-2xl md:text-3xl font-bold text-dark mb-4\">\n                  {t('welcome.title')}\n                </h2>\n                <p className=\"text-gray-600 text-lg mb-8 leading-relaxed\">\n                  {totalQuestions}{t('welcome.description')}\n                </p>\n                <div className=\"grid md:grid-cols-2 gap-6 text-left mb-8\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-secondary/20 rounded-full flex items-center justify-center\">\n                      <Clock className=\"w-4 h-4 text-secondary\" />\n                    </div>\n                    <span className=\"text-gray-700\">{t('info.duration')}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center\">\n                      <BarChart3 className=\"w-4 h-4 text-primary\" />\n                    </div>\n                    <span className=\"text-gray-700\">{t('info.questions').replace('{count}', totalQuestions.toString())}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-accent/20 rounded-full flex items-center justify-center\">\n                      <BarChart3 className=\"w-4 h-4 text-accent\" />\n                    </div>\n                    <span className=\"text-gray-700\">{t('info.accuracy')}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center\">\n                      <Shield className=\"w-4 h-4 text-purple-600\" />\n                    </div>\n                    <span className=\"text-gray-700\">{t('info.privacy')}</span>\n                  </div>\n                </div>\n                <Button\n                  onClick={startTest}\n                  className=\"bg-primary hover:bg-blue-700 text-white font-semibold px-8 py-4 rounded-xl text-lg transition-all duration-300 transform hover:scale-105 shadow-lg\"\n                  data-testid=\"button-start-test\"\n                >\n                  {t('welcome.start')}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Question Screen */}\n        {currentScreen === \"question\" && (\n          <div className=\"space-y-6\">\n            {/* Progress Bar */}\n            <Card className=\"p-6\">\n              <CardContent className=\"pt-0\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span className=\"text-sm font-medium text-gray-600\">{t('progress.title')}</span>\n                  <span className=\"text-sm font-medium text-primary\">\n                    {currentQuestion} / {totalQuestions}\n                  </span>\n                </div>\n                <Progress value={progress} className=\"w-full h-3\" />\n              </CardContent>\n            </Card>\n\n            {/* Question Card */}\n            <Card className=\"p-8 md:p-12\">\n              <CardContent className=\"pt-0\">\n                <div className=\"text-center mb-8\">\n                  <Badge variant=\"secondary\" className=\"mb-4\">\n                    {t('question.label')} {currentQuestion}\n                  </Badge>\n                  <h3 className=\"text-xl md:text-2xl font-bold text-dark leading-relaxed\">\n                    {currentQuestionData?.text}\n                  </h3>\n                </div>\n\n                {/* Answer Options */}\n                <div className=\"space-y-4\">\n                  {currentQuestionData?.options.map((option: any, index: number) => {\n                    const value = index === 0 ? \"A\" : \"B\";\n                    const isSelected = selectedAnswer === value;\n                    \n                    return (\n                      <label\n                        key={value}\n                        className=\"block cursor-pointer group\"\n                        data-testid={`option-${value.toLowerCase()}`}\n                      >\n                        <input\n                          type=\"radio\"\n                          name=\"answer\"\n                          value={value}\n                          checked={isSelected}\n                          onChange={() => setSelectedAnswer(value)}\n                          className=\"sr-only\"\n                        />\n                        <div\n                          className={`border-2 rounded-xl p-6 transition-all duration-300 ${\n                            isSelected\n                              ? \"border-primary bg-primary/5\"\n                              : \"border-gray-200 hover:border-primary/50 hover:bg-primary/5\"\n                          }`}\n                        >\n                          <div className=\"flex items-center\">\n                            <div\n                              className={`w-6 h-6 border-2 rounded-full mr-4 flex items-center justify-center ${\n                                isSelected ? \"border-primary\" : \"border-gray-300\"\n                              }`}\n                            >\n                              {isSelected && (\n                                <div className=\"w-3 h-3 bg-primary rounded-full\" />\n                              )}\n                            </div>\n                            <span className=\"text-gray-700 text-lg\">{option.text}</span>\n                          </div>\n                        </div>\n                      </label>\n                    );\n                  })}\n                </div>\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between items-center mt-8\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      onClick={goHome}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      data-testid=\"button-home\"\n                    >\n                      {t('button.home')}\n                    </Button>\n                    <Button\n                      onClick={previousQuestion}\n                      disabled={currentQuestion === 1}\n                      variant=\"ghost\"\n                      className=\"flex items-center space-x-2\"\n                      data-testid=\"button-previous\"\n                    >\n                      <ArrowLeft className=\"w-4 h-4\" />\n                      <span>{t('nav.previous')}</span>\n                    </Button>\n                  </div>\n                  <Button\n                    onClick={nextQuestion}\n                    disabled={!selectedAnswer}\n                    className=\"bg-primary hover:bg-blue-700 text-white font-semibold px-6 py-3 rounded-xl flex items-center space-x-2\"\n                    data-testid=\"button-next\"\n                  >\n                    <span>{currentQuestion === totalQuestions ? t('nav.finish') : t('nav.next')}</span>\n                    <ArrowRight className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Results Screen */}\n        {currentScreen === \"results\" && personalityInfo && scores && (\n          <div className=\"space-y-8\">\n            {/* Result Header */}\n            <Card className=\"p-8 text-center relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 to-secondary/5\"></div>\n              <CardContent className=\"pt-6 relative\">\n                <div className=\"w-32 h-32 bg-gradient-to-br from-primary to-secondary rounded-full mx-auto mb-6 flex items-center justify-center shadow-lg\">\n                  <span className=\"text-4xl font-bold text-white\" data-testid=\"text-personality-type\">\n                    {personalityType}\n                  </span>\n                </div>\n                <h2 className=\"text-3xl font-bold text-dark mb-2\" data-testid=\"text-personality-title\">\n                  {personalityInfo.title}\n                </h2>\n                <p className=\"text-xl text-gray-600 mb-4\">{personalityInfo.subtitle}</p>\n                <p className=\"text-gray-700 leading-relaxed mb-6\" data-testid=\"text-personality-description\">\n                  {personalityInfo.description}\n                </p>\n                \n                {/* Completion Stats */}\n                <div className=\"flex justify-center items-center space-x-6 mb-6\">\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span>완료 시간: {Math.floor(testCompletionTime / 60)}분 {testCompletionTime % 60}초</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                    <Sparkles className=\"w-4 h-4\" />\n                    <span>정확도: 95%+</span>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex flex-wrap justify-center gap-4\">\n                  <Button\n                    onClick={shareResults}\n                    className=\"bg-primary hover:bg-blue-700 text-white font-semibold px-6 py-3 rounded-xl flex items-center space-x-2\"\n                    data-testid=\"button-share\"\n                  >\n                    <Share className=\"w-4 h-4\" />\n                    <span>{t('results.share')}</span>\n                  </Button>\n                  <Button\n                    onClick={restartTest}\n                    variant=\"outline\"\n                    className=\"font-semibold px-6 py-3 rounded-xl flex items-center space-x-2\"\n                    data-testid=\"button-restart\"\n                  >\n                    <span>{t('button.restart')}</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Personality Dimensions */}\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {[\n                { \n                  key: \"EI\", \n                  dominant: scores.E > scores.I ? \"E\" : \"I\",\n                  dominantLabel: scores.E > scores.I ? \"외향성 (E)\" : \"내향성 (I)\",\n                  dominantScore: scores.E > scores.I ? scores.E : scores.I,\n                  recessive: scores.E > scores.I ? \"I\" : \"E\",\n                  recessiveLabel: scores.E > scores.I ? \"내향성 (I)\" : \"외향성 (E)\",\n                  recessiveScore: scores.E > scores.I ? scores.I : scores.E,\n                  color: \"from-primary to-secondary\"\n                },\n                {\n                  key: \"SN\",\n                  dominant: scores.S > scores.N ? \"S\" : \"N\", \n                  dominantLabel: scores.S > scores.N ? \"감각 (S)\" : \"직관 (N)\",\n                  dominantScore: scores.S > scores.N ? scores.S : scores.N,\n                  recessive: scores.S > scores.N ? \"N\" : \"S\",\n                  recessiveLabel: scores.S > scores.N ? \"직관 (N)\" : \"감각 (S)\",\n                  recessiveScore: scores.S > scores.N ? scores.N : scores.S,\n                  color: \"from-secondary to-primary\"\n                },\n                {\n                  key: \"TF\",\n                  dominant: scores.T > scores.F ? \"T\" : \"F\",\n                  dominantLabel: scores.T > scores.F ? \"사고 (T)\" : \"감정 (F)\", \n                  dominantScore: scores.T > scores.F ? scores.T : scores.F,\n                  recessive: scores.T > scores.F ? \"F\" : \"T\",\n                  recessiveLabel: scores.T > scores.F ? \"감정 (F)\" : \"사고 (T)\",\n                  recessiveScore: scores.T > scores.F ? scores.F : scores.T,\n                  color: \"from-accent to-orange-400\"\n                },\n                {\n                  key: \"JP\",\n                  dominant: scores.J > scores.P ? \"J\" : \"P\",\n                  dominantLabel: scores.J > scores.P ? \"판단 (J)\" : \"인식 (P)\",\n                  dominantScore: scores.J > scores.P ? scores.J : scores.P,\n                  recessive: scores.J > scores.P ? \"P\" : \"J\", \n                  recessiveLabel: scores.J > scores.P ? \"인식 (P)\" : \"판단 (J)\",\n                  recessiveScore: scores.J > scores.P ? scores.P : scores.J,\n                  color: \"from-purple-600 to-purple-400\"\n                }\n              ].map((dimension) => (\n                <Card key={dimension.key} className=\"p-6\">\n                  <CardContent className=\"pt-0\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"font-semibold text-dark\">{dimension.dominantLabel}</h3>\n                      <span className=\"text-2xl font-bold text-primary\">\n                        {Math.round(dimension.dominantScore)}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-3 mb-2\">\n                      <div\n                        className={`bg-gradient-to-r ${dimension.color} h-3 rounded-full transition-all duration-1000`}\n                        style={{ width: `${dimension.dominantScore}%` }}\n                      />\n                    </div>\n                    <p className=\"text-sm text-gray-600\">\n                      vs {dimension.recessiveLabel} {Math.round(dimension.recessiveScore)}%\n                    </p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Detailed Analysis */}\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card className=\"p-8\">\n                <CardContent className=\"pt-0\">\n                  <div className=\"flex items-center mb-6\">\n                    <div className=\"w-10 h-10 bg-secondary/20 rounded-full flex items-center justify-center mr-4\">\n                      <Star className=\"w-5 h-5 text-secondary\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-dark\">주요 강점</h3>\n                  </div>\n                  <ul className=\"space-y-3\" data-testid=\"list-strengths\">\n                    {personalityInfo.strengths.map((strength, index) => (\n                      <li key={index} className=\"flex items-start\">\n                        <div className=\"w-2 h-2 bg-secondary rounded-full mt-2 mr-3 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{strength}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"p-8\">\n                <CardContent className=\"pt-0\">\n                  <div className=\"flex items-center mb-6\">\n                    <div className=\"w-10 h-10 bg-accent/20 rounded-full flex items-center justify-center mr-4\">\n                      <AlertTriangle className=\"w-5 h-5 text-accent\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-dark\">개선 포인트</h3>\n                  </div>\n                  <ul className=\"space-y-3\" data-testid=\"list-weaknesses\">\n                    {personalityInfo.weaknesses.map((weakness, index) => (\n                      <li key={index} className=\"flex items-start\">\n                        <div className=\"w-2 h-2 bg-accent rounded-full mt-2 mr-3 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{weakness}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Career Suggestions */}\n            <Card className=\"p-8\">\n              <CardContent className=\"pt-0\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center mr-4\">\n                    <Briefcase className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-dark\">추천 직업</h3>\n                </div>\n                <div className=\"grid md:grid-cols-3 gap-4\" data-testid=\"grid-careers\">\n                  {personalityInfo.careers.map((career, index) => (\n                    <div key={index} className=\"bg-gray-50 rounded-lg p-4 text-center\">\n                      <div className=\"text-2xl mb-2\">{career.icon}</div>\n                      <p className=\"font-medium text-dark\">{career.name}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Advanced Analytics */}\n            <ResultsAnalytics \n              personalityType={personalityType}\n              personalityInfo={personalityInfo}\n              scores={scores}\n            />\n\n            {/* Advanced Features */}\n            <AdvancedFeatures \n              personalityType={personalityType}\n              personalityInfo={personalityInfo}\n              scores={scores}\n            />\n          </div>\n        )}\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-gray-100 mt-16\">\n        <div className=\"max-w-4xl mx-auto px-4 py-8\">\n          <div className=\"text-center text-gray-600 space-y-4\">\n            {/* SEO 키워드 */}\n            <div className=\"text-xs text-gray-500 mb-4\">\n              <p>MBTI 테스트 | 성격유형검사 | 심리테스트 | 16personalities | 무료 성격분석 | 직업적성검사</p>\n            </div>\n            \n            <p className=\"mb-2\">이 테스트는 참고용이며, 전문적인 심리상담을 대체하지 않습니다.</p>\n            \n            {/* 추가 링크 */}\n            <div className=\"flex justify-center space-x-6 text-sm\">\n              <span className=\"hover:text-primary cursor-pointer\">개인정보처리방침</span>\n              <span className=\"hover:text-primary cursor-pointer\">이용약관</span>\n              <span className=\"hover:text-primary cursor-pointer\">문의하기</span>\n            </div>\n            \n            <div className=\"border-t border-gray-200 pt-4\">\n              <p className=\"text-sm\">© 2024 MBTI 심리테스트. All rights reserved.</p>\n              <p className=\"text-xs mt-2\">정확도 95% 이상의 과학적 성격분석 | 15만+ 사용자 검증완료</p>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":25863},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3834},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5614},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}